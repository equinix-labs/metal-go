// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Plan plan
//
// swagger:model Plan
type Plan struct {

	// Shows which facilities the plan is available in, and the facility-based price if it is different from the default price.
	AvailableIn []*Href `json:"available_in"`

	// class
	Class string `json:"class,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// legacy
	Legacy bool `json:"legacy,omitempty"`

	// line
	Line string `json:"line,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pricing
	Pricing interface{} `json:"pricing,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// specs
	Specs interface{} `json:"specs,omitempty"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) validateAvailableIn(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableIn) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableIn); i++ {
		if swag.IsZero(m.AvailableIn[i]) { // not required
			continue
		}

		if m.AvailableIn[i] != nil {
			if err := m.AvailableIn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("available_in" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Plan) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this plan based on the context it is used
func (m *Plan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) contextValidateAvailableIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AvailableIn); i++ {

		if m.AvailableIn[i] != nil {
			if err := m.AvailableIn[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("available_in" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Plan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Plan) UnmarshalBinary(b []byte) error {
	var res Plan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
