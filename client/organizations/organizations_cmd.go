// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "organizations",
		Short: "Client for organizations",
	}

	command.AddCommand(createOrganization(ctx, client))
	command.AddCommand(createOrganizationProject(ctx, client))
	command.AddCommand(createPaymentMethod(ctx, client))
	command.AddCommand(deleteOrganization(ctx, client))
	command.AddCommand(findOrganizationById(ctx, client))
	command.AddCommand(findOrganizationCustomdata(ctx, client))
	command.AddCommand(findOrganizationDevices(ctx, client))
	command.AddCommand(findOrganizationPaymentMethods(ctx, client))
	command.AddCommand(findOrganizationProjects(ctx, client))
	command.AddCommand(findOrganizationTransfers(ctx, client))
	command.AddCommand(findOrganizations(ctx, client))
	command.AddCommand(updateOrganization(ctx, client))

	return &command
}

func createOrganization(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateOrganizationParams{}

	command := &cobra.Command{
		Use: "CreateOrganization",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateOrganization(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.OrganizationInput

	return command
}

func createOrganizationProject(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateOrganizationProjectParams{}

	command := &cobra.Command{
		Use: "CreateOrganizationProject",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateOrganizationProject(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.ProjectCreateInput

	return command
}

func createPaymentMethod(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreatePaymentMethodParams{}

	command := &cobra.Command{
		Use: "CreatePaymentMethod",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreatePaymentMethod(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.PaymentMethodCreateInput

	return command
}

func deleteOrganization(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteOrganizationParams{}

	command := &cobra.Command{
		Use: "DeleteOrganization",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeleteOrganization(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findOrganizationById(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationByIDParams{}

	command := &cobra.Command{
		Use: "FindOrganizationByID",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindOrganizationByID(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findOrganizationCustomdata(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationCustomdataParams{}

	command := &cobra.Command{
		Use: "FindOrganizationCustomdata",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindOrganizationCustomdata(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findOrganizationDevices(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationDevicesParams{}

	command := &cobra.Command{
		Use: "FindOrganizationDevices",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindOrganizationDevices(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findOrganizationPaymentMethods(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationPaymentMethodsParams{}

	command := &cobra.Command{
		Use: "FindOrganizationPaymentMethods",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindOrganizationPaymentMethods(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findOrganizationProjects(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationProjectsParams{}

	command := &cobra.Command{
		Use: "FindOrganizationProjects",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindOrganizationProjects(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findOrganizationTransfers(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationTransfersParams{}

	command := &cobra.Command{
		Use: "FindOrganizationTransfers",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindOrganizationTransfers(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findOrganizations(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationsParams{}

	command := &cobra.Command{
		Use: "FindOrganizations",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindOrganizations(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	// string

	parameters.Personal = command.PersistentFlags().String("personal", "", "Include, exclude or show only personal organizations.")

	// string

	parameters.WithoutProjects = command.PersistentFlags().String("withoutProjects", "", "Include, exclude or show only organizations that have no projects.")

	return command
}

func updateOrganization(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdateOrganizationParams{}

	command := &cobra.Command{
		Use: "UpdateOrganization",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdateOrganization(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.OrganizationInput

	return command
}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}
