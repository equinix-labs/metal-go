// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "events",
		Short: "Client for events",
	}

	command.AddCommand(findConnectionEvents(ctx, client))
	command.AddCommand(findConnectionPortEvents(ctx, client))
	command.AddCommand(findDeviceEvents(ctx, client))
	command.AddCommand(findEventById(ctx, client))
	command.AddCommand(findEvents(ctx, client))
	command.AddCommand(findOrganizationEvents(ctx, client))
	command.AddCommand(findProjectEvents(ctx, client))
	command.AddCommand(findVirtualCircuitEvents(ctx, client))
	command.AddCommand(findVolumeEvents(ctx, client))

	return &command
}

func findConnectionEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindConnectionEventsParams{}

	command := &cobra.Command{
		Use: "FindConnectionEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindConnectionEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findConnectionPortEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindConnectionPortEventsParams{}

	command := &cobra.Command{
		Use: "FindConnectionPortEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindConnectionPortEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findDeviceEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindDeviceEventsParams{}

	command := &cobra.Command{
		Use: "FindDeviceEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindDeviceEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findEventById(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindEventByIDParams{}

	command := &cobra.Command{
		Use: "FindEventByID",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindEventByID(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindEventsParams{}

	command := &cobra.Command{
		Use: "FindEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findOrganizationEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindOrganizationEventsParams{}

	command := &cobra.Command{
		Use: "FindOrganizationEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindOrganizationEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findProjectEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectEventsParams{}

	command := &cobra.Command{
		Use: "FindProjectEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findVirtualCircuitEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVirtualCircuitEventsParams{}

	command := &cobra.Command{
		Use: "FindVirtualCircuitEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVirtualCircuitEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findVolumeEvents(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVolumeEventsParams{}

	command := &cobra.Command{
		Use: "FindVolumeEvents",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVolumeEvents(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}
