// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "volumes",
		Short: "Client for volumes",
	}

	command.AddCommand(cloneVolume(ctx, client))
	command.AddCommand(createVolume(ctx, client))
	command.AddCommand(createVolumeAttachment(ctx, client))
	command.AddCommand(createVolumeSnapshotPolicy(ctx, client))
	command.AddCommand(deleteVolume(ctx, client))
	command.AddCommand(deleteVolumeAttachment(ctx, client))
	command.AddCommand(deleteVolumeSnapshot(ctx, client))
	command.AddCommand(deleteVolumeSnapshotPolicy(ctx, client))
	command.AddCommand(findVolumeAttachmentById(ctx, client))
	command.AddCommand(findVolumeAttachments(ctx, client))
	command.AddCommand(findVolumeById(ctx, client))
	command.AddCommand(findVolumeCustomdata(ctx, client))
	command.AddCommand(findVolumeSnapshots(ctx, client))
	command.AddCommand(findVolumes(ctx, client))
	command.AddCommand(restoreVolume(ctx, client))
	command.AddCommand(updateVolume(ctx, client))
	command.AddCommand(updateVolumeSnapshotPolicy(ctx, client))

	return &command
}

func cloneVolume(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CloneVolumeParams{}

	command := &cobra.Command{
		Use: "CloneVolume",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CloneVolume(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.SnapshotTimestamp = command.PersistentFlags().String("snapshotTimestamp", "", "snapshot timestamp")

	return command
}

func createVolume(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateVolumeParams{}

	command := &cobra.Command{
		Use: "CreateVolume",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateVolume(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.VolumeCreateInput

	return command
}

func createVolumeAttachment(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateVolumeAttachmentParams{}

	command := &cobra.Command{
		Use: "CreateVolumeAttachment",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateVolumeAttachment(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.VolumeAttachmentInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func createVolumeSnapshotPolicy(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateVolumeSnapshotPolicyParams{}

	command := &cobra.Command{
		Use: "CreateVolumeSnapshotPolicy",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateVolumeSnapshotPolicy(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// int64

	parameters.SnapshotCount = command.PersistentFlags().Int64("snapshotCount", 0, "Snapshot count")

	// string

	command.PersistentFlags().StringVar(&parameters.SnapshotFrequency, "snapshotFrequency", "", "Snapshot frequency")

	command.MarkPersistentFlagRequired("snapshotFrequency")

	return command
}

func deleteVolume(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteVolumeParams{}

	command := &cobra.Command{
		Use: "DeleteVolume",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeleteVolume(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func deleteVolumeAttachment(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteVolumeAttachmentParams{}

	command := &cobra.Command{
		Use: "DeleteVolumeAttachment",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeleteVolumeAttachment(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func deleteVolumeSnapshot(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteVolumeSnapshotParams{}

	command := &cobra.Command{
		Use: "DeleteVolumeSnapshot",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeleteVolumeSnapshot(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("volumeId")

	return command
}

func deleteVolumeSnapshotPolicy(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteVolumeSnapshotPolicyParams{}

	command := &cobra.Command{
		Use: "DeleteVolumeSnapshotPolicy",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeleteVolumeSnapshotPolicy(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findVolumeAttachmentById(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVolumeAttachmentByIDParams{}

	command := &cobra.Command{
		Use: "FindVolumeAttachmentByID",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVolumeAttachmentByID(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findVolumeAttachments(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVolumeAttachmentsParams{}

	command := &cobra.Command{
		Use: "FindVolumeAttachments",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVolumeAttachments(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findVolumeById(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVolumeByIDParams{}

	command := &cobra.Command{
		Use: "FindVolumeByID",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVolumeByID(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findVolumeCustomdata(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVolumeCustomdataParams{}

	command := &cobra.Command{
		Use: "FindVolumeCustomdata",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindVolumeCustomdata(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findVolumeSnapshots(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVolumeSnapshotsParams{}

	command := &cobra.Command{
		Use: "FindVolumeSnapshots",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVolumeSnapshots(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findVolumes(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVolumesParams{}

	command := &cobra.Command{
		Use: "FindVolumes",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVolumes(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func restoreVolume(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &RestoreVolumeParams{}

	command := &cobra.Command{
		Use: "RestoreVolume",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.RestoreVolume(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	command.PersistentFlags().StringVar(&parameters.RestorePoint, "restorePoint", "", "restore point")

	command.MarkPersistentFlagRequired("restorePoint")

	return command
}

func updateVolume(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdateVolumeParams{}

	command := &cobra.Command{
		Use: "UpdateVolume",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdateVolume(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.VolumeUpdateInput

	return command
}

func updateVolumeSnapshotPolicy(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdateVolumeSnapshotPolicyParams{}

	command := &cobra.Command{
		Use: "UpdateVolumeSnapshotPolicy",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdateVolumeSnapshotPolicy(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// int64

	parameters.SnapshotCount = command.PersistentFlags().Int64("snapshotCount", 0, "Snapshot count")

	// string

	command.PersistentFlags().StringVar(&parameters.SnapshotFrequency, "snapshotFrequency", "", "Snapshot frequency")

	command.MarkPersistentFlagRequired("snapshotFrequency")

	return command
}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}
