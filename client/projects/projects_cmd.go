// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "projects",
		Short: "Client for projects",
	}

	command.AddCommand(createDevice(ctx, client))
	command.AddCommand(createLicense(ctx, client))
	command.AddCommand(createProject(ctx, client))
	command.AddCommand(createProjectSshKey(ctx, client))
	command.AddCommand(createSpotMarketRequest(ctx, client))
	command.AddCommand(createTransferRequest(ctx, client))
	command.AddCommand(createVirtualNetwork(ctx, client))
	command.AddCommand(deleteProject(ctx, client))
	command.AddCommand(findBatchesByProject(ctx, client))
	command.AddCommand(findBgpConfigByProject(ctx, client))
	command.AddCommand(findDeviceSshKeys(ctx, client))
	command.AddCommand(findIpReservationCustomdata(ctx, client))
	command.AddCommand(findIpReservations(ctx, client))
	command.AddCommand(findProjectBgpSessions(ctx, client))
	command.AddCommand(findProjectById(ctx, client))
	command.AddCommand(findProjectCustomdata(ctx, client))
	command.AddCommand(findProjectDevices(ctx, client))
	command.AddCommand(findProjectHardwareReservations(ctx, client))
	command.AddCommand(findProjectLicenses(ctx, client))
	command.AddCommand(findProjectMemberships(ctx, client))
	command.AddCommand(findProjectSshKeys(ctx, client))
	command.AddCommand(findProjects(ctx, client))
	command.AddCommand(findVirtualNetworks(ctx, client))
	command.AddCommand(listSpotMarketRequests(ctx, client))
	command.AddCommand(requestBgpConfig(ctx, client))
	command.AddCommand(requestIpReservation(ctx, client))
	command.AddCommand(updateProject(ctx, client))

	return &command
}

func createDevice(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateDeviceParams{}

	command := &cobra.Command{
		Use: "CreateDevice",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateDevice(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.DeviceCreateInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func createLicense(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateLicenseParams{}

	command := &cobra.Command{
		Use: "CreateLicense",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateLicense(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.LicenseCreateInput

	return command
}

func createProject(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateProjectParams{}

	command := &cobra.Command{
		Use: "CreateProject",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateProject(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.ProjectCreateFromRootInput

	return command
}

func createProjectSshKey(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateProjectSSHKeyParams{}

	command := &cobra.Command{
		Use: "CreateProjectSSHKey",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateProjectSSHKey(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.SSHKeyInput

	return command
}

func createSpotMarketRequest(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateSpotMarketRequestParams{}

	command := &cobra.Command{
		Use: "CreateSpotMarketRequest",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateSpotMarketRequest(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.SpotMarketRequestCreateInput

	return command
}

func createTransferRequest(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateTransferRequestParams{}

	command := &cobra.Command{
		Use: "CreateTransferRequest",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateTransferRequest(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.TransferRequestInput

	return command
}

func createVirtualNetwork(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateVirtualNetworkParams{}

	command := &cobra.Command{
		Use: "CreateVirtualNetwork",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateVirtualNetwork(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.VirtualNetworkCreateInput

	return command
}

func deleteProject(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteProjectParams{}

	command := &cobra.Command{
		Use: "DeleteProject",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeleteProject(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findBatchesByProject(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindBatchesByProjectParams{}

	command := &cobra.Command{
		Use: "FindBatchesByProject",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindBatchesByProject(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findBgpConfigByProject(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindBGPConfigByProjectParams{}

	command := &cobra.Command{
		Use: "FindBGPConfigByProject",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindBGPConfigByProject(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findDeviceSshKeys(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindDeviceSSHKeysParams{}

	command := &cobra.Command{
		Use: "FindDeviceSSHKeys",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindDeviceSSHKeys(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// string

	parameters.SearchString = command.PersistentFlags().String("searchString", "", "Search by key, label, or fingerprint")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findIpReservationCustomdata(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindIPReservationCustomdataParams{}

	command := &cobra.Command{
		Use: "FindIPReservationCustomdata",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindIPReservationCustomdata(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("projectId")

	return command
}

func findIpReservations(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindIPReservationsParams{}

	command := &cobra.Command{
		Use: "FindIPReservations",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindIPReservations(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findProjectBgpSessions(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectBGPSessionsParams{}

	command := &cobra.Command{
		Use: "FindProjectBGPSessions",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectBGPSessions(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findProjectById(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectByIDParams{}

	command := &cobra.Command{
		Use: "FindProjectByID",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectByID(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findProjectCustomdata(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectCustomdataParams{}

	command := &cobra.Command{
		Use: "FindProjectCustomdata",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindProjectCustomdata(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findProjectDevices(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectDevicesParams{}

	command := &cobra.Command{
		Use: "FindProjectDevices",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectDevices(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findProjectHardwareReservations(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectHardwareReservationsParams{}

	command := &cobra.Command{
		Use: "FindProjectHardwareReservations",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectHardwareReservations(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findProjectLicenses(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectLicensesParams{}

	command := &cobra.Command{
		Use: "FindProjectLicenses",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectLicenses(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findProjectMemberships(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectMembershipsParams{}

	command := &cobra.Command{
		Use: "FindProjectMemberships",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectMemberships(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("projectId")

	return command
}

func findProjectSshKeys(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectSSHKeysParams{}

	command := &cobra.Command{
		Use: "FindProjectSSHKeys",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectSSHKeys(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// string

	parameters.SearchString = command.PersistentFlags().String("searchString", "", "Search by key, label, or fingerprint")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findProjects(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectsParams{}

	command := &cobra.Command{
		Use: "FindProjects",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjects(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	// int64

	parameters.Page = command.PersistentFlags().Int64("page", 0, "page to display, default to 1, max 100_000")

	// int64

	parameters.PerPage = command.PersistentFlags().Int64("perPage", 0, "items per page, default to 10, max 1_000")

	return command
}

func findVirtualNetworks(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindVirtualNetworksParams{}

	command := &cobra.Command{
		Use: "FindVirtualNetworks",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindVirtualNetworks(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func listSpotMarketRequests(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &ListSpotMarketRequestsParams{}

	command := &cobra.Command{
		Use: "ListSpotMarketRequests",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.ListSpotMarketRequests(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func requestBgpConfig(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &RequestBGPConfigParams{}

	command := &cobra.Command{
		Use: "RequestBGPConfig",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.RequestBGPConfig(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// types.BGPConfigRequestInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func requestIpReservation(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &RequestIPReservationParams{}

	command := &cobra.Command{
		Use: "RequestIPReservation",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.RequestIPReservation(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.IPReservationRequestInput

	return command
}

func updateProject(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdateProjectParams{}

	command := &cobra.Command{
		Use: "UpdateProject",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdateProject(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.ProjectUpdateInput

	return command
}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}
