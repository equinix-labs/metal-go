// Code generated by go-swagger; DO NOT EDIT.

package payment_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "payment_methods",
		Short: "Client for payment_methods",
	}

	command.AddCommand(deletePaymentMethod(ctx, client))
	command.AddCommand(findPaymentMethodById(ctx, client))
	command.AddCommand(updatePaymentMethod(ctx, client))

	return &command
}

func deletePaymentMethod(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeletePaymentMethodParams{}

	command := &cobra.Command{
		Use: "DeletePaymentMethod",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeletePaymentMethod(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findPaymentMethodById(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindPaymentMethodByIDParams{}

	command := &cobra.Command{
		Use: "FindPaymentMethodByID",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindPaymentMethodByID(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func updatePaymentMethod(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdatePaymentMethodParams{}

	command := &cobra.Command{
		Use: "UpdatePaymentMethod",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdatePaymentMethod(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.PaymentMethodUpdateInput

	return command
}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}
