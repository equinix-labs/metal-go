// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "devices",
		Short: "Client for devices",
	}

	command.AddCommand(createBgpSession(ctx, client))
	command.AddCommand(createDeviceBatch(ctx, client))
	command.AddCommand(createIpAssignment(ctx, client))
	command.AddCommand(deleteDevice(ctx, client))
	command.AddCommand(findBgpSessions(ctx, client))
	command.AddCommand(findDeviceById(ctx, client))
	command.AddCommand(findDeviceCustomdata(ctx, client))
	command.AddCommand(findDeviceUsages(ctx, client))
	command.AddCommand(findIpAssignmentCustomdata(ctx, client))
	command.AddCommand(findIpAssignments(ctx, client))
	command.AddCommand(findInstanceBandwidth(ctx, client))
	command.AddCommand(findProjectUsage(ctx, client))
	command.AddCommand(findTraffic(ctx, client))
	command.AddCommand(getBgpNeighborData(ctx, client))
	command.AddCommand(performAction(ctx, client))
	command.AddCommand(updateDevice(ctx, client))

	return &command
}

func createBgpSession(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateBGPSessionParams{}

	command := &cobra.Command{
		Use: "CreateBGPSession",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateBGPSession(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.BGPSessionInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func createDeviceBatch(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateDeviceBatchParams{}

	command := &cobra.Command{
		Use: "CreateDeviceBatch",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateDeviceBatch(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.InstancesBatchCreateInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func createIpAssignment(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateIPAssignmentParams{}

	command := &cobra.Command{
		Use: "CreateIPAssignment",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateIPAssignment(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.IPAssignmentInput

	return command
}

func deleteDevice(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteDeviceParams{}

	command := &cobra.Command{
		Use: "DeleteDevice",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.DeleteDevice(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// bool

	parameters.ForceDelete = command.PersistentFlags().Bool("forceDelete", false, "Force the deletion of the device, by detaching any storage volume still active.")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findBgpSessions(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindBGPSessionsParams{}

	command := &cobra.Command{
		Use: "FindBGPSessions",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindBGPSessions(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findDeviceById(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindDeviceByIDParams{}

	command := &cobra.Command{
		Use: "FindDeviceByID",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindDeviceByID(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findDeviceCustomdata(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindDeviceCustomdataParams{}

	command := &cobra.Command{
		Use: "FindDeviceCustomdata",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindDeviceCustomdata(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findDeviceUsages(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindDeviceUsagesParams{}

	command := &cobra.Command{
		Use: "FindDeviceUsages",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindDeviceUsages(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.DateTime

	command.Flags().Var(newDateTimeValue(&(parameters.CreatedAfter)), "createdAfter", "Filter usages created after this date")

	// strfmt.DateTime

	command.Flags().Var(newDateTimeValue(&(parameters.CreatedBefore)), "createdBefore", "Filter usages created before this date")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findIpAssignmentCustomdata(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindIPAssignmentCustomdataParams{}

	command := &cobra.Command{
		Use: "FindIPAssignmentCustomdata",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindIPAssignmentCustomdata(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("instanceId")

	return command
}

func findIpAssignments(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindIPAssignmentsParams{}

	command := &cobra.Command{
		Use: "FindIPAssignments",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindIPAssignments(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Include = command.PersistentFlags().String("include", "", "related attributes to include")

	return command
}

func findInstanceBandwidth(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindInstanceBandwidthParams{}

	command := &cobra.Command{
		Use: "FindInstanceBandwidth",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindInstanceBandwidth(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// string

	command.PersistentFlags().StringVar(&parameters.From, "from", "", "Timestamp from range")

	command.MarkPersistentFlagRequired("from")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	command.PersistentFlags().StringVar(&parameters.Until, "until", "", "Timestamp to range")

	command.MarkPersistentFlagRequired("until")

	return command
}

func findProjectUsage(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindProjectUsageParams{}

	command := &cobra.Command{
		Use: "FindProjectUsage",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.FindProjectUsage(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.DateTime

	command.Flags().Var(newDateTimeValue(&(parameters.CreatedAfter)), "createdAfter", "Filter usages created after this date")

	// strfmt.DateTime

	command.Flags().Var(newDateTimeValue(&(parameters.CreatedBefore)), "createdBefore", "Filter usages created before this date")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func findTraffic(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &FindTrafficParams{}

	command := &cobra.Command{
		Use: "FindTraffic",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.FindTraffic(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// string

	parameters.Bucket = command.PersistentFlags().String("bucket", "", "Traffic bucket")

	// string

	command.PersistentFlags().StringVar(&parameters.Direction, "direction", "", "Traffic direction")

	command.MarkPersistentFlagRequired("direction")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	parameters.Interval = command.PersistentFlags().String("interval", "", "Traffic interval")

	// types.Timeframe

	return command
}

func getBgpNeighborData(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &GetBGPNeighborDataParams{}

	command := &cobra.Command{
		Use: "GetBGPNeighborData",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.GetBGPNeighborData(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func performAction(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &PerformActionParams{}

	command := &cobra.Command{
		Use: "PerformAction",
		RunE: func(cmd *cobra.Command, args []string) error {

			_, err := client.PerformAction(parameters, nil)
			return err

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// string

	command.PersistentFlags().StringVar(&parameters.Type, "type", "", "Action to perform")

	command.MarkPersistentFlagRequired("type")

	return command
}

func updateDevice(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdateDeviceParams{}

	command := &cobra.Command{
		Use: "UpdateDevice",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdateDevice(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.DeviceUpdateInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}
