// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "connections",
		Short: "Client for connections",
	}

	command.AddCommand(createConnectionPortVirtualCircuit(ctx, client))
	command.AddCommand(createOrganizationInterconnection(ctx, client))
	command.AddCommand(createProjectInterconnection(ctx, client))
	command.AddCommand(deleteInterconnection(ctx, client))
	command.AddCommand(deleteVirtualCircuit(ctx, client))
	command.AddCommand(getConnectionPort(ctx, client))
	command.AddCommand(getInterconnection(ctx, client))
	command.AddCommand(getVirtualCircuit(ctx, client))
	command.AddCommand(listConnectionPortVirtualCircuits(ctx, client))
	command.AddCommand(listConnectionPorts(ctx, client))
	command.AddCommand(organizationListInterconnections(ctx, client))
	command.AddCommand(projectListInterconnections(ctx, client))
	command.AddCommand(updateInterconnection(ctx, client))
	command.AddCommand(updateVirtualCircuit(ctx, client))

	return &command
}

func createConnectionPortVirtualCircuit(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateConnectionPortVirtualCircuitParams{}

	command := &cobra.Command{
		Use: "CreateConnectionPortVirtualCircuit",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateConnectionPortVirtualCircuit(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("portId")

	// types.VirtualCircuitCreateInput

	return command
}

func createOrganizationInterconnection(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateOrganizationInterconnectionParams{}

	command := &cobra.Command{
		Use: "CreateOrganizationInterconnection",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateOrganizationInterconnection(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.InterconnectionCreateInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("organizationId")

	return command
}

func createProjectInterconnection(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &CreateProjectInterconnectionParams{}

	command := &cobra.Command{
		Use: "CreateProjectInterconnection",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.CreateProjectInterconnection(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.InterconnectionCreateInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("projectId")

	return command
}

func deleteInterconnection(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteInterconnectionParams{}

	command := &cobra.Command{
		Use: "DeleteInterconnection",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.DeleteInterconnection(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	return command
}

func deleteVirtualCircuit(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &DeleteVirtualCircuitParams{}

	command := &cobra.Command{
		Use: "DeleteVirtualCircuit",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.DeleteVirtualCircuit(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func getConnectionPort(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &GetConnectionPortParams{}

	command := &cobra.Command{
		Use: "GetConnectionPort",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.GetConnectionPort(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func getInterconnection(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &GetInterconnectionParams{}

	command := &cobra.Command{
		Use: "GetInterconnection",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.GetInterconnection(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	return command
}

func getVirtualCircuit(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &GetVirtualCircuitParams{}

	command := &cobra.Command{
		Use: "GetVirtualCircuit",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.GetVirtualCircuit(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	return command
}

func listConnectionPortVirtualCircuits(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &ListConnectionPortVirtualCircuitsParams{}

	command := &cobra.Command{
		Use: "ListConnectionPortVirtualCircuits",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.ListConnectionPortVirtualCircuits(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	// strfmt.UUID

	command.MarkPersistentFlagRequired("portId")

	return command
}

func listConnectionPorts(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &ListConnectionPortsParams{}

	command := &cobra.Command{
		Use: "ListConnectionPorts",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.ListConnectionPorts(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	return command
}

func organizationListInterconnections(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &OrganizationListInterconnectionsParams{}

	command := &cobra.Command{
		Use: "OrganizationListInterconnections",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.OrganizationListInterconnections(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("organizationId")

	return command
}

func projectListInterconnections(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &ProjectListInterconnectionsParams{}

	command := &cobra.Command{
		Use: "ProjectListInterconnections",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.ProjectListInterconnections(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("projectId")

	return command
}

func updateInterconnection(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdateInterconnectionParams{}

	command := &cobra.Command{
		Use: "UpdateInterconnection",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdateInterconnection(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// types.InterconnectionUpdateInput

	// strfmt.UUID

	command.MarkPersistentFlagRequired("connectionId")

	return command
}

func updateVirtualCircuit(ctx context.Context, client ClientService) *cobra.Command {
	parameters := &UpdateVirtualCircuitParams{}

	command := &cobra.Command{
		Use: "UpdateVirtualCircuit",
		RunE: func(cmd *cobra.Command, args []string) error {

			result, err := client.UpdateVirtualCircuit(parameters, nil)
			if err != nil {
				return err
			}
			return printPayload(result.Payload)

		},
	}

	parameters.Context = ctx

	// strfmt.UUID

	command.MarkPersistentFlagRequired("id")

	// types.VirtualCircuitUpdateInput

	return command
}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}
