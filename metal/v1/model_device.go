/*
 * Metal API
 *
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"time"
)

type Device struct {
	AlwaysPxe           bool                  `json:"always_pxe,omitempty"`
	BillingCycle        string                `json:"billing_cycle,omitempty"`
	BondingMode         int32                 `json:"bonding_mode,omitempty"`
	CreatedAt           time.Time             `json:"created_at,omitempty"`
	CreatedBy           *AllOfDeviceCreatedBy `json:"created_by,omitempty"`
	Customdata          ModelMap              `json:"customdata,omitempty"`
	Description         string                `json:"description,omitempty"`
	Facility            *Facility             `json:"facility,omitempty"`
	HardwareReservation *HardwareReservation  `json:"hardware_reservation,omitempty"`
	Hostname            string                `json:"hostname,omitempty"`
	Href                string                `json:"href,omitempty"`
	Id                  string                `json:"id,omitempty"`
	ImageUrl            string                `json:"image_url,omitempty"`
	IpAddresses         []IpAssignment        `json:"ip_addresses,omitempty"`
	IpxeScriptUrl       string                `json:"ipxe_script_url,omitempty"`
	Iqn                 string                `json:"iqn,omitempty"`
	// Prevents accidental deletion of this resource when set to true.
	Locked bool              `json:"locked,omitempty"`
	Metro  *AllOfDeviceMetro `json:"metro,omitempty"`
	// Whether network mode changes such as converting to/from Layer2 or Layer3 networking, bonding or disbonding network interfaces are permitted for the device.
	NetworkFrozen bool `json:"network_frozen,omitempty"`
	// By default, servers at Equinix Metal are configured in a “bonded” mode using LACP (Link Aggregation Control Protocol). Each 2-NIC server is configured with a single bond (namely bond0) with both interfaces eth0 and eth1 as members of the bond in a default Layer 3 mode. Some device plans may have a different number of ports and bonds available.
	NetworkPorts    []Port           `json:"network_ports,omitempty"`
	OperatingSystem *OperatingSystem `json:"operating_system,omitempty"`
	// Actions supported by the device instance.
	Actions            []DeviceActions         `json:"actions,omitempty"`
	Plan               *Plan                   `json:"plan,omitempty"`
	Project            *Project                `json:"project,omitempty"`
	ProjectLite        *AllOfDeviceProjectLite `json:"project_lite,omitempty"`
	ProvisioningEvents []Event                 `json:"provisioning_events,omitempty"`
	// Only visible while device provisioning
	ProvisioningPercentage float32 `json:"provisioning_percentage,omitempty"`
	// Root password is automatically generated when server is provisioned and it is removed after 24 hours
	RootPassword string `json:"root_password,omitempty"`
	ShortId      string `json:"short_id,omitempty"`
	// Whether or not the device is a spot instance.
	SpotInstance bool `json:"spot_instance,omitempty"`
	// The maximum price per hour you are willing to pay to keep this spot instance.  If you are outbid, the termination will be set allowing two minutes before shutdown.
	SpotPriceMax float32 `json:"spot_price_max,omitempty"`
	SshKeys      []Href  `json:"ssh_keys,omitempty"`
	// The current state the instance is in.  * When an instance is initially created it will be in the `queued` state until it is picked up by the provisioner. * Once provisioning has begun on the instance it's state will move to `provisioning`. * When an instance is deleted, it will move to `deprovisioning` state until the deprovision is completed and the instance state moves to `deleted`. * If an instance fails to provision or deprovision it will move to `failed` state. * Once an instance has completed provisioning it will move to `active` state. * If an instance is currently powering off or powering on it will move to `powering_off` or `powering_on` states respectively.  * When the instance is powered off completely it will move to the `inactive` state. * When an instance is powered on completely it will move to the `active` state. * Using the reinstall action to install a new OS on the instance will cause the instance state to change to `reinstalling`. * When the reinstall action is complete the instance will move to `active` state.
	State   string   `json:"state,omitempty"`
	Storage *Storage `json:"storage,omitempty"`
	// Switch short id. This can be used to determine if two devices are connected to the same switch, for example.
	SwitchUuid string   `json:"switch_uuid,omitempty"`
	Tags       []string `json:"tags,omitempty"`
	// When the device will be terminated. If you don't supply timezone info, the timestamp is assumed to be in UTC.  This is commonly set in advance for ephemeral spot market instances but this field may also be set with on-demand and reservation instances to automatically delete the resource at a given time. The termination time can also be used to release a hardware reservation instance at a given time, keeping the reservation open for other uses.  On a spot market device, the termination time will be set automatically when outbid.
	TerminationTime time.Time `json:"termination_time,omitempty"`
	UpdatedAt       time.Time `json:"updated_at,omitempty"`
	User            string    `json:"user,omitempty"`
	Userdata        string    `json:"userdata,omitempty"`
	Volumes         []Href    `json:"volumes,omitempty"`
	// Hostname used to connect to the instance via the SOS (Serial over SSH) out-of-band console.
	Sos string `json:"sos,omitempty"`
}
