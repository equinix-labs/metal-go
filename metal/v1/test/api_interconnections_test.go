/*
Metal API

Testing InterconnectionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v1

import (
	"context"
	"testing"

	openapiclient "github.com/equinix-labs/metal-go/metal/v1"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_v1_InterconnectionsApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InterconnectionsApiService CreateInterconnectionPortVirtualCircuit", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string
		var portId string

		resp, httpRes, err := apiClient.InterconnectionsApi.CreateInterconnectionPortVirtualCircuit(context.Background(), connectionId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService CreateOrganizationInterconnection", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.InterconnectionsApi.CreateOrganizationInterconnection(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService CreateProjectInterconnection", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.InterconnectionsApi.CreateProjectInterconnection(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService DeleteInterconnection", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.InterconnectionsApi.DeleteInterconnection(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService DeleteVirtualCircuit", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.InterconnectionsApi.DeleteVirtualCircuit(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService GetInterconnection", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.InterconnectionsApi.GetInterconnection(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService GetInterconnectionPort", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string
		var id string

		resp, httpRes, err := apiClient.InterconnectionsApi.GetInterconnectionPort(context.Background(), connectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService GetVirtualCircuit", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.InterconnectionsApi.GetVirtualCircuit(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService ListInterconnectionPortVirtualCircuits", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string
		var portId string

		resp, httpRes, err := apiClient.InterconnectionsApi.ListInterconnectionPortVirtualCircuits(context.Background(), connectionId, portId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService ListInterconnectionPorts", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.InterconnectionsApi.ListInterconnectionPorts(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService ListInterconnectionVirtualCircuits", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.InterconnectionsApi.ListInterconnectionVirtualCircuits(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService OrganizationListInterconnections", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.InterconnectionsApi.OrganizationListInterconnections(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService ProjectListInterconnections", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.InterconnectionsApi.ProjectListInterconnections(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		resp, err = apiClient.InterconnectionsApi.ProjectListInterconnections(context.Background(), projectId).ExecuteWithPagination()
		require.Nil(t, err)
		require.NotNil(t, resp)
	})

	t.Run("Test InterconnectionsApiService UpdateInterconnection", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.InterconnectionsApi.UpdateInterconnection(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test InterconnectionsApiService UpdateVirtualCircuit", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.InterconnectionsApi.UpdateVirtualCircuit(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
