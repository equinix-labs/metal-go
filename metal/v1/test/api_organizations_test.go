/*
Metal API

Testing OrganizationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v1

import (
	"context"
	"testing"

	openapiclient "github.com/equinix-labs/metal-go/metal/v1"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_v1_OrganizationsApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationsApiService CreateOrganization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OrganizationsApi.CreateOrganization(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService CreateOrganizationInvitation", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.CreateOrganizationInvitation(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService CreateOrganizationProject", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.CreateOrganizationProject(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService CreatePaymentMethod", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.CreatePaymentMethod(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService DeleteOrganization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		httpRes, err := apiClient.OrganizationsApi.DeleteOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOperatingSystemsByOrganization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.FindOperatingSystemsByOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOrganizationById", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.FindOrganizationById(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOrganizationCustomdata", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		httpRes, err := apiClient.OrganizationsApi.FindOrganizationCustomdata(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOrganizationInvitations", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.FindOrganizationInvitations(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOrganizationPaymentMethods", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.FindOrganizationPaymentMethods(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOrganizationProjects", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.FindOrganizationProjects(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOrganizationTransfers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.FindOrganizationTransfers(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindOrganizations", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.OrganizationsApi.FindOrganizations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService FindPlansByOrganization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.FindPlansByOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test OrganizationsApiService UpdateOrganization", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.OrganizationsApi.UpdateOrganization(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
