/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// checks if the PlanSpecsDrivesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanSpecsDrivesInner{}

// PlanSpecsDrivesInnerType the model 'PlanSpecsDrivesInnerType'
type PlanSpecsDrivesInnerType string

// List of PlanSpecsDrivesInnerType
const (
	PLANSPECSDRIVESINNER_HDD  PlanSpecsDrivesInnerType = "HDD"
	PLANSPECSDRIVESINNER_SSD  PlanSpecsDrivesInnerType = "SSD"
	PLANSPECSDRIVESINNER_NVME PlanSpecsDrivesInnerType = "NVME"
)

// All allowed values of PlanSpecsDrivesInnerType enum
var AllowedPlanSpecsDrivesInnerTypeEnumValues = []PlanSpecsDrivesInnerType{
	"HDD",
	"SSD",
	"NVME",
}

func (v *PlanSpecsDrivesInnerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlanSpecsDrivesInnerType(value)
	for _, existing := range AllowedPlanSpecsDrivesInnerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlanSpecsDrivesInnerType", value)
}

// NewPlanSpecsDrivesInnerTypeFromValue returns a pointer to a valid PlanSpecsDrivesInnerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlanSpecsDrivesInnerTypeFromValue(v string) (*PlanSpecsDrivesInnerType, error) {
	ev := PlanSpecsDrivesInnerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlanSpecsDrivesInnerType: valid values are %v", v, AllowedPlanSpecsDrivesInnerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlanSpecsDrivesInnerType) IsValid() bool {
	for _, existing := range AllowedPlanSpecsDrivesInnerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Type value
func (v PlanSpecsDrivesInnerType) Ptr() *PlanSpecsDrivesInnerType {
	return &v
}

type NullablePlanSpecsDrivesInnerType struct {
	value *PlanSpecsDrivesInnerType
	isSet bool
}

func (v NullablePlanSpecsDrivesInnerType) Get() *PlanSpecsDrivesInnerType {
	return v.value
}

func (v *NullablePlanSpecsDrivesInnerType) Set(val *PlanSpecsDrivesInnerType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSpecsDrivesInnerType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSpecsDrivesInnerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSpecsDrivesInnerType(val *PlanSpecsDrivesInnerType) *NullablePlanSpecsDrivesInnerType {
	return &NullablePlanSpecsDrivesInnerType{value: val, isSet: true}
}

func (v NullablePlanSpecsDrivesInnerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSpecsDrivesInnerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

// PlanSpecsDrivesInnerCategory the model 'PlanSpecsDrivesInnerCategory'
type PlanSpecsDrivesInnerCategory string

// List of PlanSpecsDrivesInnerCategory
const (
	PLANSPECSDRIVESINNER_BOOT    PlanSpecsDrivesInnerCategory = "boot"
	PLANSPECSDRIVESINNER_CACHE   PlanSpecsDrivesInnerCategory = "cache"
	PLANSPECSDRIVESINNER_STORAGE PlanSpecsDrivesInnerCategory = "storage"
)

// All allowed values of PlanSpecsDrivesInnerCategory enum
var AllowedPlanSpecsDrivesInnerCategoryEnumValues = []PlanSpecsDrivesInnerCategory{
	"boot",
	"cache",
	"storage",
}

func (v *PlanSpecsDrivesInnerCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlanSpecsDrivesInnerCategory(value)
	for _, existing := range AllowedPlanSpecsDrivesInnerCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlanSpecsDrivesInnerCategory", value)
}

// NewPlanSpecsDrivesInnerCategoryFromValue returns a pointer to a valid PlanSpecsDrivesInnerCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlanSpecsDrivesInnerCategoryFromValue(v string) (*PlanSpecsDrivesInnerCategory, error) {
	ev := PlanSpecsDrivesInnerCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlanSpecsDrivesInnerCategory: valid values are %v", v, AllowedPlanSpecsDrivesInnerCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlanSpecsDrivesInnerCategory) IsValid() bool {
	for _, existing := range AllowedPlanSpecsDrivesInnerCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Category value
func (v PlanSpecsDrivesInnerCategory) Ptr() *PlanSpecsDrivesInnerCategory {
	return &v
}

type NullablePlanSpecsDrivesInnerCategory struct {
	value *PlanSpecsDrivesInnerCategory
	isSet bool
}

func (v NullablePlanSpecsDrivesInnerCategory) Get() *PlanSpecsDrivesInnerCategory {
	return v.value
}

func (v *NullablePlanSpecsDrivesInnerCategory) Set(val *PlanSpecsDrivesInnerCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSpecsDrivesInnerCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSpecsDrivesInnerCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSpecsDrivesInnerCategory(val *PlanSpecsDrivesInnerCategory) *NullablePlanSpecsDrivesInnerCategory {
	return &NullablePlanSpecsDrivesInnerCategory{value: val, isSet: true}
}

func (v NullablePlanSpecsDrivesInnerCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSpecsDrivesInnerCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

// PlanSpecsDrivesInner struct for PlanSpecsDrivesInner
type PlanSpecsDrivesInner struct {
	Count                *int32                        `json:"count,omitempty"`
	Type                 *PlanSpecsDrivesInnerType     `json:"type,omitempty"`
	Size                 *string                       `json:"size,omitempty"`
	Category             *PlanSpecsDrivesInnerCategory `json:"category,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PlanSpecsDrivesInner PlanSpecsDrivesInner

// NewPlanSpecsDrivesInner instantiates a new PlanSpecsDrivesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSpecsDrivesInner() *PlanSpecsDrivesInner {
	this := PlanSpecsDrivesInner{}
	return &this
}

// NewPlanSpecsDrivesInnerWithDefaults instantiates a new PlanSpecsDrivesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSpecsDrivesInnerWithDefaults() *PlanSpecsDrivesInner {
	this := PlanSpecsDrivesInner{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PlanSpecsDrivesInner) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecsDrivesInner) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PlanSpecsDrivesInner) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PlanSpecsDrivesInner) SetCount(v int32) {
	o.Count = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlanSpecsDrivesInner) GetType() PlanSpecsDrivesInnerType {
	if o == nil || IsNil(o.Type) {
		var ret PlanSpecsDrivesInnerType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecsDrivesInner) GetTypeOk() (*PlanSpecsDrivesInnerType, bool) {
	if o == nil || IsNil(o.Type) {
		return o.Type, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlanSpecsDrivesInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PlanSpecsDrivesInner) SetType(v PlanSpecsDrivesInnerType) {
	o.Type = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PlanSpecsDrivesInner) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecsDrivesInner) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PlanSpecsDrivesInner) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *PlanSpecsDrivesInner) SetSize(v string) {
	o.Size = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *PlanSpecsDrivesInner) GetCategory() PlanSpecsDrivesInnerCategory {
	if o == nil || IsNil(o.Category) {
		var ret PlanSpecsDrivesInnerCategory
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSpecsDrivesInner) GetCategoryOk() (*PlanSpecsDrivesInnerCategory, bool) {
	if o == nil || IsNil(o.Category) {
		return o.Category, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *PlanSpecsDrivesInner) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *PlanSpecsDrivesInner) SetCategory(v PlanSpecsDrivesInnerCategory) {
	o.Category = &v
}

func (o PlanSpecsDrivesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanSpecsDrivesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanSpecsDrivesInner) UnmarshalJSON(bytes []byte) (err error) {
	varPlanSpecsDrivesInner := _PlanSpecsDrivesInner{}

	err = json.Unmarshal(bytes, &varPlanSpecsDrivesInner)

	if err != nil {
		return err
	}

	*o = PlanSpecsDrivesInner(varPlanSpecsDrivesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "type")
		delete(additionalProperties, "size")
		delete(additionalProperties, "category")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanSpecsDrivesInner struct {
	value *PlanSpecsDrivesInner
	isSet bool
}

func (v NullablePlanSpecsDrivesInner) Get() *PlanSpecsDrivesInner {
	return v.value
}

func (v *NullablePlanSpecsDrivesInner) Set(val *PlanSpecsDrivesInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSpecsDrivesInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSpecsDrivesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSpecsDrivesInner(val *PlanSpecsDrivesInner) *NullablePlanSpecsDrivesInner {
	return &NullablePlanSpecsDrivesInner{value: val, isSet: true}
}

func (v NullablePlanSpecsDrivesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSpecsDrivesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
