/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the MetroCapacityReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetroCapacityReport{}

// MetroCapacityReport struct for MetroCapacityReport
type MetroCapacityReport struct {
	Am                   *CapacityPerFacility `json:"am,omitempty"`
	At                   *CapacityPerFacility `json:"at,omitempty"`
	Ch                   *CapacityPerFacility `json:"ch,omitempty"`
	Da                   *CapacityPerFacility `json:"da,omitempty"`
	Dc                   *CapacityPerFacility `json:"dc,omitempty"`
	Fr                   *CapacityPerFacility `json:"fr,omitempty"`
	Hk                   *CapacityPerFacility `json:"hk,omitempty"`
	La                   *CapacityPerFacility `json:"la,omitempty"`
	Ld                   *CapacityPerFacility `json:"ld,omitempty"`
	Md                   *CapacityPerFacility `json:"md,omitempty"`
	Ny                   *CapacityPerFacility `json:"ny,omitempty"`
	Pa                   *CapacityPerFacility `json:"pa,omitempty"`
	Se                   *CapacityPerFacility `json:"se,omitempty"`
	Sg                   *CapacityPerFacility `json:"sg,omitempty"`
	Sl                   *CapacityPerFacility `json:"sl,omitempty"`
	Sp                   *CapacityPerFacility `json:"sp,omitempty"`
	Sv                   *CapacityPerFacility `json:"sv,omitempty"`
	Sy                   *CapacityPerFacility `json:"sy,omitempty"`
	Tr                   *CapacityPerFacility `json:"tr,omitempty"`
	Ty                   *CapacityPerFacility `json:"ty,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MetroCapacityReport MetroCapacityReport

// NewMetroCapacityReport instantiates a new MetroCapacityReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetroCapacityReport() *MetroCapacityReport {
	this := MetroCapacityReport{}
	return &this
}

// NewMetroCapacityReportWithDefaults instantiates a new MetroCapacityReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroCapacityReportWithDefaults() *MetroCapacityReport {
	this := MetroCapacityReport{}
	return &this
}

// GetAm returns the Am field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetAm() CapacityPerFacility {
	if o == nil || IsNil(o.Am) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Am
}

// GetAmOk returns a tuple with the Am field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetAmOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Am) {
		return nil, false
	}
	return o.Am, true
}

// HasAm returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasAm() bool {
	if o != nil && !IsNil(o.Am) {
		return true
	}

	return false
}

// SetAm gets a reference to the given CapacityPerFacility and assigns it to the Am field.
func (o *MetroCapacityReport) SetAm(v CapacityPerFacility) {
	o.Am = &v
}

// GetAt returns the At field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetAt() CapacityPerFacility {
	if o == nil || IsNil(o.At) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.At
}

// GetAtOk returns a tuple with the At field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetAtOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.At) {
		return nil, false
	}
	return o.At, true
}

// HasAt returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasAt() bool {
	if o != nil && !IsNil(o.At) {
		return true
	}

	return false
}

// SetAt gets a reference to the given CapacityPerFacility and assigns it to the At field.
func (o *MetroCapacityReport) SetAt(v CapacityPerFacility) {
	o.At = &v
}

// GetCh returns the Ch field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetCh() CapacityPerFacility {
	if o == nil || IsNil(o.Ch) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Ch
}

// GetChOk returns a tuple with the Ch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetChOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Ch) {
		return nil, false
	}
	return o.Ch, true
}

// HasCh returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasCh() bool {
	if o != nil && !IsNil(o.Ch) {
		return true
	}

	return false
}

// SetCh gets a reference to the given CapacityPerFacility and assigns it to the Ch field.
func (o *MetroCapacityReport) SetCh(v CapacityPerFacility) {
	o.Ch = &v
}

// GetDa returns the Da field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetDa() CapacityPerFacility {
	if o == nil || IsNil(o.Da) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Da
}

// GetDaOk returns a tuple with the Da field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetDaOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Da) {
		return nil, false
	}
	return o.Da, true
}

// HasDa returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasDa() bool {
	if o != nil && !IsNil(o.Da) {
		return true
	}

	return false
}

// SetDa gets a reference to the given CapacityPerFacility and assigns it to the Da field.
func (o *MetroCapacityReport) SetDa(v CapacityPerFacility) {
	o.Da = &v
}

// GetDc returns the Dc field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetDc() CapacityPerFacility {
	if o == nil || IsNil(o.Dc) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Dc
}

// GetDcOk returns a tuple with the Dc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetDcOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Dc) {
		return nil, false
	}
	return o.Dc, true
}

// HasDc returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasDc() bool {
	if o != nil && !IsNil(o.Dc) {
		return true
	}

	return false
}

// SetDc gets a reference to the given CapacityPerFacility and assigns it to the Dc field.
func (o *MetroCapacityReport) SetDc(v CapacityPerFacility) {
	o.Dc = &v
}

// GetFr returns the Fr field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetFr() CapacityPerFacility {
	if o == nil || IsNil(o.Fr) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Fr
}

// GetFrOk returns a tuple with the Fr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetFrOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Fr) {
		return nil, false
	}
	return o.Fr, true
}

// HasFr returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasFr() bool {
	if o != nil && !IsNil(o.Fr) {
		return true
	}

	return false
}

// SetFr gets a reference to the given CapacityPerFacility and assigns it to the Fr field.
func (o *MetroCapacityReport) SetFr(v CapacityPerFacility) {
	o.Fr = &v
}

// GetHk returns the Hk field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetHk() CapacityPerFacility {
	if o == nil || IsNil(o.Hk) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Hk
}

// GetHkOk returns a tuple with the Hk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetHkOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Hk) {
		return nil, false
	}
	return o.Hk, true
}

// HasHk returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasHk() bool {
	if o != nil && !IsNil(o.Hk) {
		return true
	}

	return false
}

// SetHk gets a reference to the given CapacityPerFacility and assigns it to the Hk field.
func (o *MetroCapacityReport) SetHk(v CapacityPerFacility) {
	o.Hk = &v
}

// GetLa returns the La field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetLa() CapacityPerFacility {
	if o == nil || IsNil(o.La) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.La
}

// GetLaOk returns a tuple with the La field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetLaOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.La) {
		return nil, false
	}
	return o.La, true
}

// HasLa returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasLa() bool {
	if o != nil && !IsNil(o.La) {
		return true
	}

	return false
}

// SetLa gets a reference to the given CapacityPerFacility and assigns it to the La field.
func (o *MetroCapacityReport) SetLa(v CapacityPerFacility) {
	o.La = &v
}

// GetLd returns the Ld field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetLd() CapacityPerFacility {
	if o == nil || IsNil(o.Ld) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Ld
}

// GetLdOk returns a tuple with the Ld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetLdOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Ld) {
		return nil, false
	}
	return o.Ld, true
}

// HasLd returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasLd() bool {
	if o != nil && !IsNil(o.Ld) {
		return true
	}

	return false
}

// SetLd gets a reference to the given CapacityPerFacility and assigns it to the Ld field.
func (o *MetroCapacityReport) SetLd(v CapacityPerFacility) {
	o.Ld = &v
}

// GetMd returns the Md field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetMd() CapacityPerFacility {
	if o == nil || IsNil(o.Md) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Md
}

// GetMdOk returns a tuple with the Md field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetMdOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Md) {
		return nil, false
	}
	return o.Md, true
}

// HasMd returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasMd() bool {
	if o != nil && !IsNil(o.Md) {
		return true
	}

	return false
}

// SetMd gets a reference to the given CapacityPerFacility and assigns it to the Md field.
func (o *MetroCapacityReport) SetMd(v CapacityPerFacility) {
	o.Md = &v
}

// GetNy returns the Ny field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetNy() CapacityPerFacility {
	if o == nil || IsNil(o.Ny) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Ny
}

// GetNyOk returns a tuple with the Ny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetNyOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Ny) {
		return nil, false
	}
	return o.Ny, true
}

// HasNy returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasNy() bool {
	if o != nil && !IsNil(o.Ny) {
		return true
	}

	return false
}

// SetNy gets a reference to the given CapacityPerFacility and assigns it to the Ny field.
func (o *MetroCapacityReport) SetNy(v CapacityPerFacility) {
	o.Ny = &v
}

// GetPa returns the Pa field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetPa() CapacityPerFacility {
	if o == nil || IsNil(o.Pa) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Pa
}

// GetPaOk returns a tuple with the Pa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetPaOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Pa) {
		return nil, false
	}
	return o.Pa, true
}

// HasPa returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasPa() bool {
	if o != nil && !IsNil(o.Pa) {
		return true
	}

	return false
}

// SetPa gets a reference to the given CapacityPerFacility and assigns it to the Pa field.
func (o *MetroCapacityReport) SetPa(v CapacityPerFacility) {
	o.Pa = &v
}

// GetSe returns the Se field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetSe() CapacityPerFacility {
	if o == nil || IsNil(o.Se) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Se
}

// GetSeOk returns a tuple with the Se field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetSeOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Se) {
		return nil, false
	}
	return o.Se, true
}

// HasSe returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasSe() bool {
	if o != nil && !IsNil(o.Se) {
		return true
	}

	return false
}

// SetSe gets a reference to the given CapacityPerFacility and assigns it to the Se field.
func (o *MetroCapacityReport) SetSe(v CapacityPerFacility) {
	o.Se = &v
}

// GetSg returns the Sg field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetSg() CapacityPerFacility {
	if o == nil || IsNil(o.Sg) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Sg
}

// GetSgOk returns a tuple with the Sg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetSgOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Sg) {
		return nil, false
	}
	return o.Sg, true
}

// HasSg returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasSg() bool {
	if o != nil && !IsNil(o.Sg) {
		return true
	}

	return false
}

// SetSg gets a reference to the given CapacityPerFacility and assigns it to the Sg field.
func (o *MetroCapacityReport) SetSg(v CapacityPerFacility) {
	o.Sg = &v
}

// GetSl returns the Sl field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetSl() CapacityPerFacility {
	if o == nil || IsNil(o.Sl) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Sl
}

// GetSlOk returns a tuple with the Sl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetSlOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Sl) {
		return nil, false
	}
	return o.Sl, true
}

// HasSl returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasSl() bool {
	if o != nil && !IsNil(o.Sl) {
		return true
	}

	return false
}

// SetSl gets a reference to the given CapacityPerFacility and assigns it to the Sl field.
func (o *MetroCapacityReport) SetSl(v CapacityPerFacility) {
	o.Sl = &v
}

// GetSp returns the Sp field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetSp() CapacityPerFacility {
	if o == nil || IsNil(o.Sp) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Sp
}

// GetSpOk returns a tuple with the Sp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetSpOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Sp) {
		return nil, false
	}
	return o.Sp, true
}

// HasSp returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasSp() bool {
	if o != nil && !IsNil(o.Sp) {
		return true
	}

	return false
}

// SetSp gets a reference to the given CapacityPerFacility and assigns it to the Sp field.
func (o *MetroCapacityReport) SetSp(v CapacityPerFacility) {
	o.Sp = &v
}

// GetSv returns the Sv field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetSv() CapacityPerFacility {
	if o == nil || IsNil(o.Sv) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Sv
}

// GetSvOk returns a tuple with the Sv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetSvOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Sv) {
		return nil, false
	}
	return o.Sv, true
}

// HasSv returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasSv() bool {
	if o != nil && !IsNil(o.Sv) {
		return true
	}

	return false
}

// SetSv gets a reference to the given CapacityPerFacility and assigns it to the Sv field.
func (o *MetroCapacityReport) SetSv(v CapacityPerFacility) {
	o.Sv = &v
}

// GetSy returns the Sy field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetSy() CapacityPerFacility {
	if o == nil || IsNil(o.Sy) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Sy
}

// GetSyOk returns a tuple with the Sy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetSyOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Sy) {
		return nil, false
	}
	return o.Sy, true
}

// HasSy returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasSy() bool {
	if o != nil && !IsNil(o.Sy) {
		return true
	}

	return false
}

// SetSy gets a reference to the given CapacityPerFacility and assigns it to the Sy field.
func (o *MetroCapacityReport) SetSy(v CapacityPerFacility) {
	o.Sy = &v
}

// GetTr returns the Tr field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetTr() CapacityPerFacility {
	if o == nil || IsNil(o.Tr) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Tr
}

// GetTrOk returns a tuple with the Tr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetTrOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Tr) {
		return nil, false
	}
	return o.Tr, true
}

// HasTr returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasTr() bool {
	if o != nil && !IsNil(o.Tr) {
		return true
	}

	return false
}

// SetTr gets a reference to the given CapacityPerFacility and assigns it to the Tr field.
func (o *MetroCapacityReport) SetTr(v CapacityPerFacility) {
	o.Tr = &v
}

// GetTy returns the Ty field value if set, zero value otherwise.
func (o *MetroCapacityReport) GetTy() CapacityPerFacility {
	if o == nil || IsNil(o.Ty) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Ty
}

// GetTyOk returns a tuple with the Ty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityReport) GetTyOk() (*CapacityPerFacility, bool) {
	if o == nil || IsNil(o.Ty) {
		return nil, false
	}
	return o.Ty, true
}

// HasTy returns a boolean if a field has been set.
func (o *MetroCapacityReport) HasTy() bool {
	if o != nil && !IsNil(o.Ty) {
		return true
	}

	return false
}

// SetTy gets a reference to the given CapacityPerFacility and assigns it to the Ty field.
func (o *MetroCapacityReport) SetTy(v CapacityPerFacility) {
	o.Ty = &v
}

func (o MetroCapacityReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetroCapacityReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Am) {
		toSerialize["am"] = o.Am
	}
	if !IsNil(o.At) {
		toSerialize["at"] = o.At
	}
	if !IsNil(o.Ch) {
		toSerialize["ch"] = o.Ch
	}
	if !IsNil(o.Da) {
		toSerialize["da"] = o.Da
	}
	if !IsNil(o.Dc) {
		toSerialize["dc"] = o.Dc
	}
	if !IsNil(o.Fr) {
		toSerialize["fr"] = o.Fr
	}
	if !IsNil(o.Hk) {
		toSerialize["hk"] = o.Hk
	}
	if !IsNil(o.La) {
		toSerialize["la"] = o.La
	}
	if !IsNil(o.Ld) {
		toSerialize["ld"] = o.Ld
	}
	if !IsNil(o.Md) {
		toSerialize["md"] = o.Md
	}
	if !IsNil(o.Ny) {
		toSerialize["ny"] = o.Ny
	}
	if !IsNil(o.Pa) {
		toSerialize["pa"] = o.Pa
	}
	if !IsNil(o.Se) {
		toSerialize["se"] = o.Se
	}
	if !IsNil(o.Sg) {
		toSerialize["sg"] = o.Sg
	}
	if !IsNil(o.Sl) {
		toSerialize["sl"] = o.Sl
	}
	if !IsNil(o.Sp) {
		toSerialize["sp"] = o.Sp
	}
	if !IsNil(o.Sv) {
		toSerialize["sv"] = o.Sv
	}
	if !IsNil(o.Sy) {
		toSerialize["sy"] = o.Sy
	}
	if !IsNil(o.Tr) {
		toSerialize["tr"] = o.Tr
	}
	if !IsNil(o.Ty) {
		toSerialize["ty"] = o.Ty
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MetroCapacityReport) UnmarshalJSON(bytes []byte) (err error) {
	varMetroCapacityReport := _MetroCapacityReport{}

	if err = json.Unmarshal(bytes, &varMetroCapacityReport); err == nil {
		*o = MetroCapacityReport(varMetroCapacityReport)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "am")
		delete(additionalProperties, "at")
		delete(additionalProperties, "ch")
		delete(additionalProperties, "da")
		delete(additionalProperties, "dc")
		delete(additionalProperties, "fr")
		delete(additionalProperties, "hk")
		delete(additionalProperties, "la")
		delete(additionalProperties, "ld")
		delete(additionalProperties, "md")
		delete(additionalProperties, "ny")
		delete(additionalProperties, "pa")
		delete(additionalProperties, "se")
		delete(additionalProperties, "sg")
		delete(additionalProperties, "sl")
		delete(additionalProperties, "sp")
		delete(additionalProperties, "sv")
		delete(additionalProperties, "sy")
		delete(additionalProperties, "tr")
		delete(additionalProperties, "ty")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMetroCapacityReport struct {
	value *MetroCapacityReport
	isSet bool
}

func (v NullableMetroCapacityReport) Get() *MetroCapacityReport {
	return v.value
}

func (v *NullableMetroCapacityReport) Set(val *MetroCapacityReport) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroCapacityReport) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroCapacityReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroCapacityReport(val *MetroCapacityReport) *NullableMetroCapacityReport {
	return &NullableMetroCapacityReport{value: val, isSet: true}
}

func (v NullableMetroCapacityReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroCapacityReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
