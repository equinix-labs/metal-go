/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the CapacityReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapacityReport{}

// CapacityReport struct for CapacityReport
type CapacityReport struct {
	Ams1                 *CapacityPerFacility    `json:"ams1,omitempty"`
	Atl1                 *CapacityPerNewFacility `json:"atl1,omitempty"`
	Dfw1                 *CapacityPerNewFacility `json:"dfw1,omitempty"`
	Ewr1                 *CapacityPerFacility    `json:"ewr1,omitempty"`
	Fra1                 *CapacityPerNewFacility `json:"fra1,omitempty"`
	Iad1                 *CapacityPerNewFacility `json:"iad1,omitempty"`
	Lax1                 *CapacityPerNewFacility `json:"lax1,omitempty"`
	Nrt1                 *CapacityPerFacility    `json:"nrt1,omitempty"`
	Ord1                 *CapacityPerNewFacility `json:"ord1,omitempty"`
	Sea1                 *CapacityPerNewFacility `json:"sea1,omitempty"`
	Sin1                 *CapacityPerNewFacility `json:"sin1,omitempty"`
	Sjc1                 *CapacityPerFacility    `json:"sjc1,omitempty"`
	Syd1                 *CapacityPerNewFacility `json:"syd1,omitempty"`
	Yyz1                 *CapacityPerNewFacility `json:"yyz1,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CapacityReport CapacityReport

// NewCapacityReport instantiates a new CapacityReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapacityReport() *CapacityReport {
	this := CapacityReport{}
	return &this
}

// NewCapacityReportWithDefaults instantiates a new CapacityReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityReportWithDefaults() *CapacityReport {
	this := CapacityReport{}
	return &this
}

// GetAms1 returns the Ams1 field value if set, zero value otherwise.
func (o *CapacityReport) GetAms1() CapacityPerFacility {
	if o == nil || isNil(o.Ams1) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Ams1
}

// GetAms1Ok returns a tuple with the Ams1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetAms1Ok() (*CapacityPerFacility, bool) {
	if o == nil || isNil(o.Ams1) {
		return nil, false
	}
	return o.Ams1, true
}

// HasAms1 returns a boolean if a field has been set.
func (o *CapacityReport) HasAms1() bool {
	if o != nil && !isNil(o.Ams1) {
		return true
	}

	return false
}

// SetAms1 gets a reference to the given CapacityPerFacility and assigns it to the Ams1 field.
func (o *CapacityReport) SetAms1(v CapacityPerFacility) {
	o.Ams1 = &v
}

// GetAtl1 returns the Atl1 field value if set, zero value otherwise.
func (o *CapacityReport) GetAtl1() CapacityPerNewFacility {
	if o == nil || isNil(o.Atl1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Atl1
}

// GetAtl1Ok returns a tuple with the Atl1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetAtl1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Atl1) {
		return nil, false
	}
	return o.Atl1, true
}

// HasAtl1 returns a boolean if a field has been set.
func (o *CapacityReport) HasAtl1() bool {
	if o != nil && !isNil(o.Atl1) {
		return true
	}

	return false
}

// SetAtl1 gets a reference to the given CapacityPerNewFacility and assigns it to the Atl1 field.
func (o *CapacityReport) SetAtl1(v CapacityPerNewFacility) {
	o.Atl1 = &v
}

// GetDfw1 returns the Dfw1 field value if set, zero value otherwise.
func (o *CapacityReport) GetDfw1() CapacityPerNewFacility {
	if o == nil || isNil(o.Dfw1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Dfw1
}

// GetDfw1Ok returns a tuple with the Dfw1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetDfw1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Dfw1) {
		return nil, false
	}
	return o.Dfw1, true
}

// HasDfw1 returns a boolean if a field has been set.
func (o *CapacityReport) HasDfw1() bool {
	if o != nil && !isNil(o.Dfw1) {
		return true
	}

	return false
}

// SetDfw1 gets a reference to the given CapacityPerNewFacility and assigns it to the Dfw1 field.
func (o *CapacityReport) SetDfw1(v CapacityPerNewFacility) {
	o.Dfw1 = &v
}

// GetEwr1 returns the Ewr1 field value if set, zero value otherwise.
func (o *CapacityReport) GetEwr1() CapacityPerFacility {
	if o == nil || isNil(o.Ewr1) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Ewr1
}

// GetEwr1Ok returns a tuple with the Ewr1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetEwr1Ok() (*CapacityPerFacility, bool) {
	if o == nil || isNil(o.Ewr1) {
		return nil, false
	}
	return o.Ewr1, true
}

// HasEwr1 returns a boolean if a field has been set.
func (o *CapacityReport) HasEwr1() bool {
	if o != nil && !isNil(o.Ewr1) {
		return true
	}

	return false
}

// SetEwr1 gets a reference to the given CapacityPerFacility and assigns it to the Ewr1 field.
func (o *CapacityReport) SetEwr1(v CapacityPerFacility) {
	o.Ewr1 = &v
}

// GetFra1 returns the Fra1 field value if set, zero value otherwise.
func (o *CapacityReport) GetFra1() CapacityPerNewFacility {
	if o == nil || isNil(o.Fra1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Fra1
}

// GetFra1Ok returns a tuple with the Fra1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetFra1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Fra1) {
		return nil, false
	}
	return o.Fra1, true
}

// HasFra1 returns a boolean if a field has been set.
func (o *CapacityReport) HasFra1() bool {
	if o != nil && !isNil(o.Fra1) {
		return true
	}

	return false
}

// SetFra1 gets a reference to the given CapacityPerNewFacility and assigns it to the Fra1 field.
func (o *CapacityReport) SetFra1(v CapacityPerNewFacility) {
	o.Fra1 = &v
}

// GetIad1 returns the Iad1 field value if set, zero value otherwise.
func (o *CapacityReport) GetIad1() CapacityPerNewFacility {
	if o == nil || isNil(o.Iad1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Iad1
}

// GetIad1Ok returns a tuple with the Iad1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetIad1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Iad1) {
		return nil, false
	}
	return o.Iad1, true
}

// HasIad1 returns a boolean if a field has been set.
func (o *CapacityReport) HasIad1() bool {
	if o != nil && !isNil(o.Iad1) {
		return true
	}

	return false
}

// SetIad1 gets a reference to the given CapacityPerNewFacility and assigns it to the Iad1 field.
func (o *CapacityReport) SetIad1(v CapacityPerNewFacility) {
	o.Iad1 = &v
}

// GetLax1 returns the Lax1 field value if set, zero value otherwise.
func (o *CapacityReport) GetLax1() CapacityPerNewFacility {
	if o == nil || isNil(o.Lax1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Lax1
}

// GetLax1Ok returns a tuple with the Lax1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetLax1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Lax1) {
		return nil, false
	}
	return o.Lax1, true
}

// HasLax1 returns a boolean if a field has been set.
func (o *CapacityReport) HasLax1() bool {
	if o != nil && !isNil(o.Lax1) {
		return true
	}

	return false
}

// SetLax1 gets a reference to the given CapacityPerNewFacility and assigns it to the Lax1 field.
func (o *CapacityReport) SetLax1(v CapacityPerNewFacility) {
	o.Lax1 = &v
}

// GetNrt1 returns the Nrt1 field value if set, zero value otherwise.
func (o *CapacityReport) GetNrt1() CapacityPerFacility {
	if o == nil || isNil(o.Nrt1) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Nrt1
}

// GetNrt1Ok returns a tuple with the Nrt1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetNrt1Ok() (*CapacityPerFacility, bool) {
	if o == nil || isNil(o.Nrt1) {
		return nil, false
	}
	return o.Nrt1, true
}

// HasNrt1 returns a boolean if a field has been set.
func (o *CapacityReport) HasNrt1() bool {
	if o != nil && !isNil(o.Nrt1) {
		return true
	}

	return false
}

// SetNrt1 gets a reference to the given CapacityPerFacility and assigns it to the Nrt1 field.
func (o *CapacityReport) SetNrt1(v CapacityPerFacility) {
	o.Nrt1 = &v
}

// GetOrd1 returns the Ord1 field value if set, zero value otherwise.
func (o *CapacityReport) GetOrd1() CapacityPerNewFacility {
	if o == nil || isNil(o.Ord1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Ord1
}

// GetOrd1Ok returns a tuple with the Ord1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetOrd1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Ord1) {
		return nil, false
	}
	return o.Ord1, true
}

// HasOrd1 returns a boolean if a field has been set.
func (o *CapacityReport) HasOrd1() bool {
	if o != nil && !isNil(o.Ord1) {
		return true
	}

	return false
}

// SetOrd1 gets a reference to the given CapacityPerNewFacility and assigns it to the Ord1 field.
func (o *CapacityReport) SetOrd1(v CapacityPerNewFacility) {
	o.Ord1 = &v
}

// GetSea1 returns the Sea1 field value if set, zero value otherwise.
func (o *CapacityReport) GetSea1() CapacityPerNewFacility {
	if o == nil || isNil(o.Sea1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Sea1
}

// GetSea1Ok returns a tuple with the Sea1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetSea1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Sea1) {
		return nil, false
	}
	return o.Sea1, true
}

// HasSea1 returns a boolean if a field has been set.
func (o *CapacityReport) HasSea1() bool {
	if o != nil && !isNil(o.Sea1) {
		return true
	}

	return false
}

// SetSea1 gets a reference to the given CapacityPerNewFacility and assigns it to the Sea1 field.
func (o *CapacityReport) SetSea1(v CapacityPerNewFacility) {
	o.Sea1 = &v
}

// GetSin1 returns the Sin1 field value if set, zero value otherwise.
func (o *CapacityReport) GetSin1() CapacityPerNewFacility {
	if o == nil || isNil(o.Sin1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Sin1
}

// GetSin1Ok returns a tuple with the Sin1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetSin1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Sin1) {
		return nil, false
	}
	return o.Sin1, true
}

// HasSin1 returns a boolean if a field has been set.
func (o *CapacityReport) HasSin1() bool {
	if o != nil && !isNil(o.Sin1) {
		return true
	}

	return false
}

// SetSin1 gets a reference to the given CapacityPerNewFacility and assigns it to the Sin1 field.
func (o *CapacityReport) SetSin1(v CapacityPerNewFacility) {
	o.Sin1 = &v
}

// GetSjc1 returns the Sjc1 field value if set, zero value otherwise.
func (o *CapacityReport) GetSjc1() CapacityPerFacility {
	if o == nil || isNil(o.Sjc1) {
		var ret CapacityPerFacility
		return ret
	}
	return *o.Sjc1
}

// GetSjc1Ok returns a tuple with the Sjc1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetSjc1Ok() (*CapacityPerFacility, bool) {
	if o == nil || isNil(o.Sjc1) {
		return nil, false
	}
	return o.Sjc1, true
}

// HasSjc1 returns a boolean if a field has been set.
func (o *CapacityReport) HasSjc1() bool {
	if o != nil && !isNil(o.Sjc1) {
		return true
	}

	return false
}

// SetSjc1 gets a reference to the given CapacityPerFacility and assigns it to the Sjc1 field.
func (o *CapacityReport) SetSjc1(v CapacityPerFacility) {
	o.Sjc1 = &v
}

// GetSyd1 returns the Syd1 field value if set, zero value otherwise.
func (o *CapacityReport) GetSyd1() CapacityPerNewFacility {
	if o == nil || isNil(o.Syd1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Syd1
}

// GetSyd1Ok returns a tuple with the Syd1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetSyd1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Syd1) {
		return nil, false
	}
	return o.Syd1, true
}

// HasSyd1 returns a boolean if a field has been set.
func (o *CapacityReport) HasSyd1() bool {
	if o != nil && !isNil(o.Syd1) {
		return true
	}

	return false
}

// SetSyd1 gets a reference to the given CapacityPerNewFacility and assigns it to the Syd1 field.
func (o *CapacityReport) SetSyd1(v CapacityPerNewFacility) {
	o.Syd1 = &v
}

// GetYyz1 returns the Yyz1 field value if set, zero value otherwise.
func (o *CapacityReport) GetYyz1() CapacityPerNewFacility {
	if o == nil || isNil(o.Yyz1) {
		var ret CapacityPerNewFacility
		return ret
	}
	return *o.Yyz1
}

// GetYyz1Ok returns a tuple with the Yyz1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityReport) GetYyz1Ok() (*CapacityPerNewFacility, bool) {
	if o == nil || isNil(o.Yyz1) {
		return nil, false
	}
	return o.Yyz1, true
}

// HasYyz1 returns a boolean if a field has been set.
func (o *CapacityReport) HasYyz1() bool {
	if o != nil && !isNil(o.Yyz1) {
		return true
	}

	return false
}

// SetYyz1 gets a reference to the given CapacityPerNewFacility and assigns it to the Yyz1 field.
func (o *CapacityReport) SetYyz1(v CapacityPerNewFacility) {
	o.Yyz1 = &v
}

func (o CapacityReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapacityReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Ams1) {
		toSerialize["ams1"] = o.Ams1
	}
	if !isNil(o.Atl1) {
		toSerialize["atl1"] = o.Atl1
	}
	if !isNil(o.Dfw1) {
		toSerialize["dfw1"] = o.Dfw1
	}
	if !isNil(o.Ewr1) {
		toSerialize["ewr1"] = o.Ewr1
	}
	if !isNil(o.Fra1) {
		toSerialize["fra1"] = o.Fra1
	}
	if !isNil(o.Iad1) {
		toSerialize["iad1"] = o.Iad1
	}
	if !isNil(o.Lax1) {
		toSerialize["lax1"] = o.Lax1
	}
	if !isNil(o.Nrt1) {
		toSerialize["nrt1"] = o.Nrt1
	}
	if !isNil(o.Ord1) {
		toSerialize["ord1"] = o.Ord1
	}
	if !isNil(o.Sea1) {
		toSerialize["sea1"] = o.Sea1
	}
	if !isNil(o.Sin1) {
		toSerialize["sin1"] = o.Sin1
	}
	if !isNil(o.Sjc1) {
		toSerialize["sjc1"] = o.Sjc1
	}
	if !isNil(o.Syd1) {
		toSerialize["syd1"] = o.Syd1
	}
	if !isNil(o.Yyz1) {
		toSerialize["yyz1"] = o.Yyz1
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CapacityReport) UnmarshalJSON(bytes []byte) (err error) {
	varCapacityReport := _CapacityReport{}

	if err = json.Unmarshal(bytes, &varCapacityReport); err == nil {
		*o = CapacityReport(varCapacityReport)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ams1")
		delete(additionalProperties, "atl1")
		delete(additionalProperties, "dfw1")
		delete(additionalProperties, "ewr1")
		delete(additionalProperties, "fra1")
		delete(additionalProperties, "iad1")
		delete(additionalProperties, "lax1")
		delete(additionalProperties, "nrt1")
		delete(additionalProperties, "ord1")
		delete(additionalProperties, "sea1")
		delete(additionalProperties, "sin1")
		delete(additionalProperties, "sjc1")
		delete(additionalProperties, "syd1")
		delete(additionalProperties, "yyz1")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCapacityReport struct {
	value *CapacityReport
	isSet bool
}

func (v NullableCapacityReport) Get() *CapacityReport {
	return v.value
}

func (v *NullableCapacityReport) Set(val *CapacityReport) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacityReport) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacityReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacityReport(val *CapacityReport) *NullableCapacityReport {
	return &NullableCapacityReport{value: val, isSet: true}
}

func (v NullableCapacityReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacityReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
