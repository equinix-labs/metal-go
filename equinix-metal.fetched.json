{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Metal API",
    "description": "This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.",
    "termsOfService": "https://metal.equinix.com/legal/",
    "contact": {
      "name": "Equinix Metal API Team",
      "email": "support@equinixmetal.com"
    },
    "license": {
      "name": "Equinix Metal",
      "url": "https://metal.equinix.com/legal/"
    }
  },
  "schemes": [
    "https"
  ],
  "host": "api.equinix.com",
  "basePath": "/metal/v1",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "x_auth_token": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "x_auth_token": [

      ]
    }
  ],
  "tags": [
    {
      "name": "Batches",
      "description": "Manage device batches. See project endpoints to list batches for a particular project. Check out the product docs to learn more about [Batch Deployment](https://metal.equinix.com/developers/docs/deploy/batch-deployment/)."
    },
    {
      "name": "BGP",
      "description": "Manage BGP configs and sessions. See device endpoints to create and list BGP sessions for a particular device. Check out the product docs to learn more about [Local and Global BGP](https://metal.equinix.com/developers/docs/networking/local-global-bgp/)."
    },
    {
      "name": "Capacity",
      "description": "Capacity Management. Check out the product docs to learn more about [Capacity](https://metal.equinix.com/developers/docs/locations/capacity/)."
    },
    {
      "name": "Connections",
      "description": "Network Interconnections. See Instructions to create Network Interconnections at Check out the product docs to learn more about [Equinix Fabric](https://metal.equinix.com/developers/docs/networking/fabric/)."
    },
    {
      "name": "Devices",
      "description": "Device Management. Check out the product docs to learn more about [Server Devices](https://metal.equinix.com/developers/docs/servers/)."
    },
    {
      "name": "Emails",
      "description": "Email Management"
    },
    {
      "name": "Events",
      "description": "Event Management"
    },
    {
      "name": "Facilities",
      "description": "Facility Management. Check out the product docs to learn more about [Facilities](https://metal.equinix.com/developers/docs/locations/)."
    },
    {
      "name": "HardwareReservations",
      "description": "Hardware Reservation Management. Check out the product docs to learn more about [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/)."
    },
    {
      "name": "Invitations",
      "description": "Manage invitations. See project endpoints to create a new invitation. Check out the product docs to learn more about [Invitations](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "IPAddresses",
      "description": "Manage IP addresses. See device and project endpoints to list and create IP assignments for a particular project or device. Check out the product docs to learn more about [the basic networking features](https://metal.equinix.com/developers/docs/networking/standard-ips/)."
    },
    {
      "name": "Licenses",
      "description": "Manage licenses. See project endpoints to list and create licenses for a particular project."
    },
    {
      "name": "Memberships",
      "description": "Membership Management (Project). Check out the product docs to learn more about [Membership](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "OperatingSystems",
      "description": "Operating System Management. Check out the product docs to learn more about [Operating Systems choices](https://metal.equinix.com/developers/docs/operating-systems/)."
    },
    {
      "name": "Organizations",
      "description": "Organizations Management. Check out the product docs to learn more about [Organizations](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "Otps",
      "description": "Otps ManagementCheck out the product docs to learn more about [OTP](https://metal.equinix.com/developers/docs/accounts/two-factor-authentication/)."
    },
    {
      "name": "PaymentMethods",
      "description": "Payment Method Management"
    },
    {
      "name": "Plans",
      "description": "Plan Management (Device). Check out the product docs to learn more about [Device Plans](https://metal.equinix.com/developers/docs/servers/)."
    },
    {
      "name": "Ports",
      "description": "Port ManagementCheck out the product docs to learn more about [Port configurations](https://metal.equinix.com/developers/docs/networking/layer2/)."
    },
    {
      "name": "Projects",
      "description": "Project Management. Check out the product docs to learn more about [Projects](https://metal.equinix.com/developers/docs/accounts/)."
    },
    {
      "name": "Regions",
      "description": "Regions Listing"
    },
    {
      "name": "Market",
      "description": "Spot Market Prices Management. Check out the product docs to learn more about [Spot Market features](https://metal.equinix.com/developers/docs/deploy/spot-market/)."
    },
    {
      "name": "SpotMarketRequest",
      "description": "Spot Market Requests Management. Check out the product docs to learn more about [Spot Market features](https://metal.equinix.com/developers/docs/deploy/spot-market/)."
    },
    {
      "name": "SSHKeys",
      "description": "Manage SSH keys. See project endpoints to list and create project-level SSH keys."
    },
    {
      "name": "TransferRequests",
      "description": "Project Transfer Requests Management"
    },
    {
      "name": "TwoFactorAuth",
      "description": "Two Factor Authentication Management. Check out the product docs to learn more about [2FA](https://metal.equinix.com/developers/docs/accounts/two-factor-authentication/)."
    },
    {
      "name": "Usages",
      "description": "Usage Management"
    },
    {
      "name": "Userdata",
      "description": "Userdata Management"
    },
    {
      "name": "Users",
      "description": "User Management"
    },
    {
      "name": "UserVerificationTokens",
      "description": "User Verification Token Management"
    },
    {
      "name": "VLANs",
      "description": "Manage virtual networks (VLANs). See project endpoints to list and create virtual networks. Check out the product docs to learn more about [VLANs](https://metal.equinix.com/developers/docs/networking/layer2/)."
    },
    {
      "name": "Volumes",
      "description": "Volume Management (Block Storage). "
    },
    {
      "name": "VPN",
      "description": "VPN Management. Check out the product docs to learn more about [Doorman VPN](https://metal.equinix.com/developers/docs/networking/features/)."
    }
  ],
  "paths": {
    "/projects/{id}/batches": {
      "get": {
        "summary": "Retrieve all batches by project",
        "description": "Returns all batches for the given project",
        "operationId": "findBatchesByProject",
        "tags": [
          "Projects",
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BatchesList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/batches/{id}": {
      "get": {
        "summary": "Retrieve a Batch",
        "description": "Returns a Batch",
        "operationId": "findBatchById",
        "tags": [
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Batch UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Batch"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Delete the Batch",
        "description": "Deletes the Batch.",
        "operationId": "deleteBatch",
        "tags": [
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Batch UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "remove_associated_instances",
            "in": "body",
            "description": "Default route",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/bgp-configs": {
      "post": {
        "tags": [
          "Projects",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bgp_config_request",
            "in": "body",
            "description": "BGP config Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BgpConfigRequestInput"
            }
          }
        ],
        "summary": "Requesting bgp config",
        "description": "Requests to enable bgp configuration for a project.",
        "operationId": "requestBgpConfig",
        "responses": {
          "204": {
            "description": "no content"
          },
          "403": {
            "description": "forbidden"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/projects/{id}/bgp-config": {
      "get": {
        "summary": "Retrieve a bgp config",
        "description": "Returns a bgp config",
        "operationId": "findBgpConfigByProject",
        "tags": [
          "Projects",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok\n\nWhen BGP configuration is not enabled empty structure is returned.\nWhen BGP configuration is disabled after being enabled BGP configuration data is returned with status disabled.\n",
            "schema": {
              "$ref": "#/definitions/BgpConfig"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found\n\nThe project was not found.\n"
          }
        }
      }
    },
    "/devices/{id}/bgp/neighbors": {
      "get": {
        "summary": "Retrieve BGP neighbor data for this device",
        "description": "Provides a summary of the BGP neighbor data associated to the BGP sessions for this device.",
        "operationId": "getBgpNeighborData",
        "tags": [
          "Devices",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSessionNeighbors"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/bgp/sessions": {
      "get": {
        "summary": "Retrieve all BGP sessions for project",
        "description": "Provides a listing of available BGP sessions for the project.",
        "operationId": "findProjectBgpSessions",
        "tags": [
          "Projects",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSessionList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{id}/bgp/sessions": {
      "get": {
        "summary": "Retrieve all BGP sessions",
        "description": "Provides a listing of available BGP sessions for the device.",
        "operationId": "findBgpSessions",
        "tags": [
          "Devices",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSessionList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          }
        }
      },
      "post": {
        "summary": "Create a BGP session",
        "description": "Creates a BGP session.",
        "operationId": "createBgpSession",
        "tags": [
          "Devices",
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bgp_session",
            "in": "body",
            "description": "BGP session to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BGPSessionInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSession"
            }
          },
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/BgpSession"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/bgp/sessions/{id}": {
      "get": {
        "summary": "Retrieve a BGP session",
        "description": "Returns a BGP session",
        "operationId": "findBgpSessionById",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "BGP session UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/BgpSession"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Delete the BGP session",
        "description": "Deletes the BGP session.",
        "operationId": "deleteBgpSession",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "BGP session UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the BGP session",
        "description": "Updates the BGP session by either enabling or disabling the default route functionality.",
        "operationId": "updateBgpSession",
        "tags": [
          "BGP"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "BGP session UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "default_route",
            "in": "body",
            "description": "Default route",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/capacity": {
      "get": {
        "summary": "View capacity",
        "description": "Returns a list of facilities and plans with their current capacity.",
        "operationId": "findCapacityForFacility",
        "tags": [
          "Capacity"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/CapacityList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "post": {
        "summary": "Check capacity",
        "description": "Validates if a deploy can be fulfilled.",
        "operationId": "checkCapacityForFacility",
        "tags": [
          "Capacity"
        ],
        "parameters": [
          {
            "name": "facility",
            "in": "body",
            "description": "Facility to check capacity in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CapacityInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/CapacityCheckPerFacilityList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/devices/{id}/events": {
      "get": {
        "summary": "Retrieve device's events",
        "description": "Returns a list of events pertaining to a specific device",
        "operationId": "findDeviceEvents",
        "tags": [
          "Events",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/organizations/{id}/events": {
      "get": {
        "summary": "Retrieve organization's events",
        "description": "Returns a list of events for a single organization",
        "operationId": "findOrganizationEvents",
        "tags": [
          "Events",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/events": {
      "get": {
        "summary": "Retrieve project's events",
        "description": "Returns a list of events for a single project",
        "operationId": "findProjectEvents",
        "tags": [
          "Events",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/volumes/{id}/events": {
      "get": {
        "summary": "Retrieve volume's events",
        "description": "Returns a list of the current volume’s events",
        "operationId": "findVolumeEvents",
        "tags": [
          "Events",
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/events": {
      "get": {
        "summary": "Retrieve current user's events",
        "description": "Returns a list of the current user’s events",
        "operationId": "findEvents",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/EventList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Retrieve an event",
        "description": "Returns a single event if the user has access",
        "operationId": "findEventById",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/connections/{connection_id}/events": {
      "get": {
        "summary": "Retrieve connection events",
        "description": "Returns a list of the connection events",
        "operationId": "findConnectionEvents",
        "tags": [
          "Events",
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/connections/{connection_id}/ports/{id}/events": {
      "get": {
        "summary": "Retrieve connection port events",
        "description": "Returns a list of the connection port events",
        "operationId": "findConnectionPortEvents",
        "tags": [
          "Events",
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Connection Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/virtual-circuit/{id}/events": {
      "get": {
        "summary": "Retrieve connection events",
        "description": "Returns a list of the virtual circuit events",
        "operationId": "findVirtualCircuitEvents",
        "tags": [
          "Events",
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/facilities": {
      "get": {
        "summary": "Retrieve all facilities",
        "description": "Provides a listing of available datacenters where you can provision Packet devices.",
        "operationId": "findFacilities",
        "tags": [
          "Facilities"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "address",
                "labels"
              ]
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "address",
                "labels"
              ]
            },
            "collectionFormat": "csv",
            "default": [
              "address"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FacilityList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/projects/{id}/facilities": {
      "get": {
        "summary": "Retrieve all facilities visible by the project",
        "description": "Returns a listing of available datacenters for the given project",
        "operationId": "findFacilitiesByProject",
        "tags": [
          "Facilities",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FacilityList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/organizations/{id}/facilities": {
      "get": {
        "summary": "Retrieve all facilities visible by the organization",
        "description": "Returns a listing of available datacenters for the given organization",
        "operationId": "findFacilitiesByOrganization",
        "tags": [
          "Facilities",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FacilityList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/hardware-reservations": {
      "get": {
        "summary": "Retrieve all hardware reservations for a given project",
        "description": "Provides a collection of hardware reservations for a given project.",
        "operationId": "findProjectHardwareReservations",
        "tags": [
          "Projects",
          "HardwareReservations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/HardwareReservationList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/hardware-reservations/{id}": {
      "get": {
        "summary": "Retrieve a hardware reservation",
        "description": "Returns a single hardware reservation",
        "operationId": "findHardwareReservationById",
        "tags": [
          "HardwareReservations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "HardwareReservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/incidents": {
      "get": {
        "summary": "Retrieve the number of incidents",
        "description": "Retrieve the number of incidents.",
        "tags": [
          "incidents"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/devices/{id}/actions": {
      "post": {
        "summary": "Perform an action",
        "description": "Performs an action for the given device.  Possible actions include: power_on, power_off, reboot, reinstall, and rescue (reboot the device into rescue OS.)",
        "operationId": "performAction",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Action to perform",
            "required": true,
            "type": "string",
            "enum": [
              "power_on",
              "power_off",
              "reboot",
              "rescue",
              "reinstall"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "accepted"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/organizations/{id}/devices": {
      "get": {
        "summary": "Retrieve all devices of an organization",
        "description": "Provides a collection of devices for a given organization.",
        "operationId": "findOrganizationDevices",
        "tags": [
          "Organizations",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/DeviceList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/devices": {
      "get": {
        "summary": "Retrieve all devices of a project",
        "description": "Provides a collection of devices for a given project.",
        "operationId": "findProjectDevices",
        "tags": [
          "Projects",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/DeviceList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create a device",
        "description": "Creates a new device and provisions it in our datacenter.\n\nType-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.\n\nThe features attribute allows you to optionally specify what features your server should have.\n\nFor example, if you require a server with a TPM chip, you may specify `{ \"features\": { \"tpm\": \"required\" } }` (or `{ \"features\": [\"tpm\"] }` in shorthand).\n\nThe request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).\n\nThe request will not fail if we have no servers with that feature in our inventory.\n\nThe facilities attribute specifies in what datacenter you wish to create the device.\n\nYou can either specify a single facility `{ \"facility\": \"f1\" }` , or you can instruct to create the device in the best available datacenter `{ \"facility\": \"any\" }`. Additionally it is possible to set a prioritized location selection.\n\nFor example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` will try to assign to the facility f3, if there are no available f2, and so on. If \"any\" is not specified for \"facility\", the request will fail unless it can assign in the selected locations.\n\nThe `ip_addresses attribute will allow you to specify the addresses you want created with your device.\n\nTo maintain backwards compatibility, If the attribute is not sent in the request, it will be treated as if `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": true }, { \"address_family\": 4, \"public\": false }, { \"address_family\": 6, \"public\": true }] }` was sent.\n\nThe private IPv4 address is required and always need to be sent in the array. Not all operating systems support no public IPv4 address, so in those cases you will receive an error message.\n\nFor example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.\n\nNote: when specifying a subnet size larger than a /30, you will need to supply the UUID(s) of existing ip_reservations in your project to assign IPs from.\n\nFor example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`\n\nTo access a server without public IPs, you can use our Out-of-Band console access (SOS) or use another server with public IPs as a proxy.\n",
        "operationId": "createDevice",
        "tags": [
          "Projects",
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "device",
            "in": "body",
            "description": "Device to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{id}": {
      "get": {
        "summary": "Retrieve a device",
        "description": "Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.\n                         State value can be one of: active inactive queued or provisioning",
        "operationId": "findDeviceById",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the device",
        "description": "Updates the device.",
        "operationId": "updateDevice",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "device",
            "in": "body",
            "description": "Facility to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Device"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the device",
        "description": "Deletes a device and deprovisions it in our datacenter.",
        "operationId": "deleteDevice",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "force_delete",
            "in": "query",
            "description": "Force the deletion of the device, by detaching any storage volume still active.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/devices/batch": {
      "post": {
        "summary": "Create a devices batch",
        "description": "Creates new devices in batch and provisions them in our datacenter.\n\nType-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.\n\nThe features attribute allows you to optionally specify what features your server should have.\n\nFor example, if you require a server with a TPM chip, you may specify `{ \"features\": { \"tpm\": \"required\" } }` (or `{ \"features\": [\"tpm\"] }` in shorthand).\n\nThe request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).\n\nThe request will not fail if we have no servers with that feature in our inventory.\n\nThe facilities attribute specifies in what datacenter you wish to create the device.\n\nYou can either specify a single facility `{ \"facility\": \"f1\" }` , or you can instruct to create the device in the best available datacenter `{ \"facility\": \"any\" }`. Additionally it is possible to set a prioritized location selection.\n\nFor example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` will try to assign to the facility f3, if there are no available f2, and so on. If \"any\" is not specified for \"facility\", the request will fail unless it can assign in the selected locations.\n\nWith `{ \"facility\": \"any\" }` you have the option to diversify to indicate how many facilities you are willing to be spread across. For this purpose use parameter: `facility_diversity_level = N`.\n\nFor example:\n\n`{ \"facilities\": [\"sjc1\", \"ewr1\", \"any\"] ,  \"facility_diversity_level\" = 1, \"quantity\" = 10 }` will assign 10 devices into the same facility, trying first in \"sjc1\", and if there aren’t available, it will try in  \"ewr1\", otherwise any other.\n\nThe `ip_addresses` attribute will allow you to specify the addresses you want created with your device.\n\nTo maintain backwards compatibility, If the attribute is not sent in the request, it will be treated as if `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": true }, { \"address_family\": 4, \"public\": false }, { \"address_family\": 6, \"public\": true }] }` was sent.\n\nThe private IPv4 address is required and always need to be sent in the array. Not all operating systems support no public IPv4 address, so in those cases you will receive an error message.\n\nFor example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.\n\nNote: when specifying a subnet size larger than a /30, you will need to supply the UUID(s) of existing ip_reservations in your project to assign IPs from.\n\nFor example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`\n\nTo access a server without public IPs, you can use our Out-of-Band console access (SOS) or use another server with public IPs as a proxy.",
        "operationId": "createDeviceBatch",
        "tags": [
          "Devices",
          "Batches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "batch",
            "in": "body",
            "description": "Batches to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstancesBatchCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/BatchesList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{id}/bandwidth": {
      "get": {
        "summary": "Retrieve an instance bandwidth",
        "description": "Retrieve an instance bandwidth for a given period of time.",
        "operationId": "findInstanceBandwidth",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp from range",
            "required": true,
            "type": "string"
          },
          {
            "name": "until",
            "in": "query",
            "description": "Timestamp to range",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/organizations/{organization_id}/connections": {
      "post": {
        "summary": "Request a new connection for the organization",
        "description": "Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.",
        "operationId": "createOrganizationInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "UUID of the organization",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "connection",
            "in": "body",
            "description": "Connection details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InterconnectionCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "get": {
        "summary": "List organization connections",
        "description": "List the connections belonging to the organization",
        "operationId": "organizationListInterconnections",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "UUID of the organization",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionList"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{project_id}/connections": {
      "post": {
        "summary": "Request a new connection for the project's organization",
        "description": "Creates a new connection request",
        "operationId": "createProjectInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "UUID of the project",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "connection",
            "in": "body",
            "description": "Connection details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InterconnectionCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden"
          }
        }
      },
      "get": {
        "summary": "List project connections",
        "description": "List the connections belonging to the project",
        "operationId": "projectListInterconnections",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "UUID of the project",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionList"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/connections/{connection_id}": {
      "get": {
        "summary": "Get connection",
        "description": "Get the details of a connection",
        "operationId": "getInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update connection",
        "description": "Update the details of a connection",
        "operationId": "updateInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "connection",
            "in": "body",
            "description": "Updated connection details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InterconnectionUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Delete connection",
        "description": "Delete a connection, its associated ports and virtual circuits.",
        "operationId": "deleteInterconnection",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "Connection UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "202": {
            "description": "accepted",
            "schema": {
              "$ref": "#/definitions/Interconnection"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/connections/{connection_id}/ports": {
      "get": {
        "summary": "List a connection's ports",
        "description": "List the ports associated to an connection.",
        "operationId": "listConnectionPorts",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionPortList"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/connections/{connection_id}/ports/{id}": {
      "get": {
        "summary": "Get a connection port",
        "description": "Get the details of an connection port.",
        "operationId": "getConnectionPort",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InterconnectionPort"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/connections/{connection_id}/ports/{port_id}/virtual-circuits": {
      "get": {
        "summary": "List a connection port's virtual circuits",
        "description": "List the virtual circuit record(s) associatiated with a particular connection port.",
        "operationId": "listConnectionPortVirtualCircuits",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "UUID of the connection port",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuitList"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create a new Virtual Circuit",
        "description": "Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.",
        "operationId": "createConnectionPortVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "description": "UUID of the connection",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "UUID of the connection port",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "virtual_circuit",
            "in": "body",
            "description": "Virtual Circuit details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualCircuitCreateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuitList"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/virtual-circuits/{id}": {
      "get": {
        "summary": "Get a virtual circuit",
        "description": "Get the details of a virtual circuit",
        "operationId": "getVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update a virtual circuit",
        "description": "Update the details of a virtual circuit.",
        "operationId": "updateVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "virtual_circuit",
            "in": "body",
            "description": "Updated Virtual Circuit details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualCircuitUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "202": {
            "description": "accepted",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a virtual circuit",
        "description": "Delete a virtual circuit from a dedicated port.",
        "operationId": "deleteVirtualCircuit",
        "tags": [
          "Connections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Circuit UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "202": {
            "description": "accepted",
            "schema": {
              "$ref": "#/definitions/VirtualCircuit"
            }
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/virtual-networks/{id}/internet-gateways": {
      "post": {
        "tags": [
          "InternetGateways",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Network UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "length",
            "in": "query",
            "description": "IP Reservation length",
            "required": true,
            "type": "string"
          }
        ],
        "summary": "Create an internet gateway",
        "description": "Creates an internet gateway.",
        "operationId": "createInternetGateway",
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/InternetGateway"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/invitations/{id}": {
      "get": {
        "summary": "View an invitation",
        "description": "Returns a single invitation. (It include the `invitable` to maintain backward compatibility but will be removed soon)",
        "operationId": "findInvitationById",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invitation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Accept an invitation",
        "description": "Accept an invitation.",
        "operationId": "acceptInvitation",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invitation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Decline an invitation",
        "description": "Decline an invitation.",
        "operationId": "declineInvitation",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invitation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{project_id}/invitations": {
      "get": {
        "summary": "Retrieve project invitations",
        "description": "Returns all invitations in a project.",
        "operationId": "findProjectInvitations",
        "tags": [
          "Invitations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InvitationList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create an invitation for a project",
        "description": "In order to add a user to a project, they must first be invited.",
        "operationId": "createProjectInvitation",
        "tags": [
          "Invitations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "invitation",
            "in": "body",
            "description": "Invitation to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/organizations/{id}/invitations": {
      "get": {
        "summary": "Retrieve organization invitations",
        "description": "Returns all invitations in an organization.",
        "operationId": "findOrganizationInvitations",
        "tags": [
          "Invitations",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InvitationList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create an invitation for an organization",
        "description": "In order to add a user to an organization, they must first be invited.\nTo invite to several projects the parameter `projects_ids:[a,b,c]` can be used",
        "operationId": "createOrganizationInvitation",
        "tags": [
          "Invitations",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "invitation",
            "in": "body",
            "description": "Invitation to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/invitations": {
      "get": {
        "summary": "Retrieve current user invitations",
        "description": "Returns all invitations in current user.",
        "operationId": "findInvitations",
        "tags": [
          "Invitations",
          "Users"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/InvitationList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/ips/{id}": {
      "get": {
        "summary": "Retrieve an ip address",
        "description": "Returns a single ip address if the user has access.",
        "operationId": "findIPAddressById",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPAssignment"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Unassign an ip address",
        "description": "Note! This call can be used to un-assign an IP assignment or delete an IP reservation. Un-assign an IP address record. Use the assignment UUID you get after attaching the IP. This will remove the relationship between an IP and the device and will make the IP address available to be assigned to another device. Delete and IP reservation. Use the reservation UUID you get after adding the IP to the project. This will permanently delete the IP block reservation from the project.",
        "operationId": "deleteIPAddress",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{id}/ips": {
      "get": {
        "summary": "Retrieve all ip assignments",
        "description": "Returns all ip assignments for a device.",
        "operationId": "findIPAssignments",
        "tags": [
          "Devices",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPAssignmentList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create a ip assignment",
        "description": "Creates an ip assignment for a device.",
        "operationId": "createIPAssignment",
        "tags": [
          "Devices",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ip_assignment",
            "in": "body",
            "description": "IPAssignment to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPAssignmentInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/IPAssignment"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/ips/{id}/available": {
      "get": {
        "summary": "Retrieve all available subnets of a particular reservation",
        "description": "Provides a list of IP resevations for a single project.",
        "operationId": "findIPAvailabilities",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "cidr",
            "in": "query",
            "description": "Size of subnets in bits",
            "required": true,
            "type": "string",
            "enum": [
              "20",
              "21",
              "22",
              "23",
              "24",
              "25",
              "26",
              "27",
              "28",
              "29",
              "30",
              "31",
              "32",
              "33",
              "34",
              "35",
              "36",
              "37",
              "38",
              "39",
              "40",
              "41",
              "42",
              "43",
              "44",
              "45",
              "46",
              "47",
              "48",
              "49",
              "50",
              "51",
              "52",
              "53",
              "54",
              "55",
              "56",
              "57",
              "58",
              "59",
              "60",
              "61",
              "62",
              "63",
              "64",
              "65",
              "66",
              "67",
              "68",
              "69",
              "70",
              "71",
              "72",
              "73",
              "74",
              "75",
              "76",
              "77",
              "78",
              "79",
              "80",
              "81",
              "82",
              "83",
              "84",
              "85",
              "86",
              "87",
              "88",
              "89",
              "90",
              "91",
              "92",
              "93",
              "94",
              "95",
              "96",
              "97",
              "98",
              "99",
              "100",
              "101",
              "102",
              "103",
              "104",
              "105",
              "106",
              "107",
              "108",
              "109",
              "110",
              "111",
              "112",
              "113",
              "114",
              "115",
              "116",
              "117",
              "118",
              "119",
              "120",
              "121",
              "122",
              "123",
              "124",
              "125",
              "126",
              "127",
              "128"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPAvailabilitiesList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/ips": {
      "get": {
        "summary": "Retrieve all ip reservations",
        "description": "Provides a list of IP resevations for a single project.",
        "operationId": "findIPReservations",
        "tags": [
          "Projects",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/IPReservationList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "tags": [
          "Projects",
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ip_reservation_request",
            "in": "body",
            "description": "IP Reservation Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IPReservationRequestInput"
            }
          }
        ],
        "summary": "Requesting IP reservations",
        "description": "Request more IP space for a project in order to have additional IP addresses to assign to devices.  If the request is within the max quota, an IP reservation will be created. If the project will exceed its IP quota, a request will be submitted for review, and will return an IP Reservation with a `state` of `pending`. You can automatically have the request fail with HTTP status 422 instead of triggering the review process by providing the `fail_on_approval_required` parameter set to `true` in the request.",
        "operationId": "requestIPReservation",
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/IPReservation"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/projects/{id}/licenses": {
      "get": {
        "summary": "Retrieve all licenses",
        "description": "Provides a collection of licenses for a given project.",
        "operationId": "findProjectLicenses",
        "tags": [
          "Projects",
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/LicenseList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create a License",
        "description": "Creates a new license for the given project",
        "operationId": "createLicense",
        "tags": [
          "Projects",
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "license",
            "in": "body",
            "description": "License to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicenseCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/License"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/licenses/{id}": {
      "get": {
        "summary": "Retrieve a license",
        "description": "Returns a license",
        "operationId": "findLicenseById",
        "tags": [
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "License UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/License"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the license",
        "description": "Updates the license.",
        "operationId": "updateLicense",
        "tags": [
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "License UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "license",
            "in": "body",
            "description": "License to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LicenseUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/License"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the license",
        "description": "Deletes a license.",
        "operationId": "deleteLicense",
        "tags": [
          "Licenses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "License UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{project_id}/memberships": {
      "get": {
        "summary": "Retrieve project memberships",
        "description": "Returns all memberships in a project.",
        "operationId": "findProjectMemberships",
        "tags": [
          "Projects",
          "Memberships"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/MembershipList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/memberships/{id}": {
      "get": {
        "summary": "Retrieve a membership",
        "description": "Returns a single membership.",
        "operationId": "findMembershipById",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Membership UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the membership",
        "description": "Updates the membership.",
        "operationId": "updateMembership",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Membership UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "membership",
            "in": "body",
            "description": "Membership to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembershipInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the membership",
        "description": "Deletes the membership.",
        "operationId": "deleteMembership",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Membership UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of a project",
        "description": "Provides the custom metadata stored for this project in json format",
        "operationId": "findProjectCustomdata",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/organizations/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an organization",
        "description": "Provides the custom metadata stored for this organization in json format",
        "operationId": "findOrganizationCustomdata",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/users/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of a user",
        "description": "Provides the custom metadata stored for this user in json format",
        "operationId": "findUserCustomdata",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an instance",
        "description": "Provides the custom metadata stored for this instance in json format",
        "operationId": "findDeviceCustomdata",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Instance UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/storage/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of a storage volume",
        "description": "Provides the custom metadata stored for this storage volume in json format",
        "operationId": "findVolumeCustomdata",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Storage Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{project_id}/ips/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an IP Reservation",
        "description": "Provides the custom metadata stored for this IP Reservation in json format",
        "operationId": "findIPReservationCustomdata",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Ip Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{instance_id}/ips/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an IP Assignment",
        "description": "Provides the custom metadata stored for this IP Assignment in json format",
        "operationId": "findIPAssignmentCustomdata",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "Instance UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Ip Assignment UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/ips/{id}/customdata": {
      "get": {
        "summary": "Retrieve the custom metadata of an IP Reservation or IP Assignment",
        "description": "Provides the custom metadata stored for this IP Reservation or IP Assignment in json format",
        "operationId": "findIPAddressCustomdata",
        "tags": [
          "IPAddresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ip Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/hardware-reservations/{id}/move": {
      "post": {
        "summary": "Move a hardware reservation",
        "description": "Move a hardware reservation to another project",
        "tags": [
          "HardwareReservations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Hardware Reservation UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "project_id",
            "in": "body",
            "description": "Project UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/HardwareReservation"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/organizations/{id}/operating-systems": {
      "get": {
        "summary": "Retrieve all operating systems visible by the organization",
        "description": "Returns a listing of available operating systems for the given organization",
        "operationId": "findOperatingSystemsByOrganization",
        "tags": [
          "OperatingSystems",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OperatingSystemList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/operating-systems": {
      "get": {
        "summary": "Retrieve all operating systems",
        "description": "Provides a listing of available operating systems to provision your new device with.",
        "operationId": "findOperatingSystems",
        "tags": [
          "OperatingSystems"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OperatingSystemList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/operating-system-versions": {
      "get": {
        "summary": "Retrieve all operating system versions",
        "description": "Provides a listing of available operating system versions.",
        "operationId": "findOperatingSystemVersion",
        "tags": [
          "OperatingSystemVersions"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OperatingSystemList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "summary": "Retrieve all organizations",
        "description": "Returns a list of organizations that are accessible to the current user.",
        "operationId": "findOrganizations",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "personal",
            "in": "query",
            "description": "Include, exclude or show only personal organizations.",
            "required": false,
            "type": "string",
            "enum": [
              "include",
              "exclude",
              "only"
            ]
          },
          {
            "name": "without_projects",
            "in": "query",
            "description": "Include, exclude or show only organizations that have no projects.",
            "required": false,
            "type": "string",
            "enum": [
              "include",
              "exclude",
              "only"
            ]
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OrganizationList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create an organization",
        "description": "Creates an organization.",
        "operationId": "createOrganization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "organization",
            "in": "body",
            "description": "Organization to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "summary": "Retrieve an organization's details",
        "description": "Returns a single organization's details, if the user is authorized to view it.",
        "operationId": "findOrganizationById",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the organization",
        "description": "Updates the organization.",
        "operationId": "updateOrganization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "organization",
            "in": "body",
            "description": "Organization to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the organization",
        "description": "Deletes the organization.",
        "operationId": "deleteOrganization",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/user/otp/recovery-codes": {
      "get": {
        "summary": "Retrieve my recovery codes",
        "description": "Returns my recovery codes.",
        "operationId": "findRecoveryCodes",
        "tags": [
          "Otps"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/RecoveryCodeList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "post": {
        "summary": "Generate new recovery codes",
        "description": "Generate a new set of recovery codes.",
        "operationId": "regenerateCodes",
        "tags": [
          "Otps"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/RecoveryCodeList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/user/otp/verify/{otp}": {
      "post": {
        "summary": "Verify user by providing an OTP",
        "description": "It verifies the user once a valid OTP is provided. It gives back a session token, essentially logging in the user.",
        "operationId": "findEnsureOtp",
        "tags": [
          "Otps"
        ],
        "parameters": [
          {
            "name": "otp",
            "in": "path",
            "description": "OTP",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/user/otp/sms/receive": {
      "post": {
        "summary": "Receive an OTP per sms",
        "description": "Sends an OTP to the user's mobile phone.",
        "operationId": "receiveCodes",
        "tags": [
          "Otps"
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/reset-password": {
      "post": {
        "summary": "Create a password reset token",
        "description": "Creates a password reset token",
        "operationId": "createPasswordResetToken",
        "tags": [
          "PasswordResetTokens"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email of user to create password reset token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Reset current user password",
        "description": "Resets current user password.",
        "operationId": "resetPassword",
        "tags": [
          "PasswordResetTokens"
        ],
        "responses": {
          "201": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/NewPassword"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/organizations/{id}/payment-methods": {
      "get": {
        "summary": "Retrieve all payment methods of an organization",
        "description": "Returns all payment methods of an organization.",
        "operationId": "findOrganizationPaymentMethods",
        "tags": [
          "Organizations",
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PaymentMethodList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create a payment method for the given organization",
        "description": "Creates a payment method.",
        "operationId": "createPaymentMethod",
        "tags": [
          "Organizations",
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "payment_method",
            "in": "body",
            "description": "Payment Method to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/payment-methods/{id}": {
      "get": {
        "summary": "Retrieve a payment method",
        "description": "Returns a payment method",
        "operationId": "findPaymentMethodById",
        "tags": [
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment Method UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the payment method",
        "description": "Updates the payment method.",
        "operationId": "updatePaymentMethod",
        "tags": [
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment Method UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "payment_method",
            "in": "body",
            "description": "Payment Method to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the payment method",
        "description": "Deletes the payment method.",
        "operationId": "deletePaymentMethod",
        "tags": [
          "PaymentMethods"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment Method UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/plans": {
      "get": {
        "summary": "Retrieve all plans",
        "description": "Provides a listing of available plans to provision your device on.",
        "operationId": "findPlans",
        "tags": [
          "Plans"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PlanList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/projects/{id}/plans": {
      "get": {
        "summary": "Retrieve all plans visible by the project",
        "description": "Returns a listing of available plans for the given project",
        "operationId": "findPlansByProject",
        "tags": [
          "Plans",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PlanList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/organizations/{id}/plans": {
      "get": {
        "summary": "Retrieve all plans visible by the organization",
        "description": "Returns a listing of available plans for the given organization",
        "operationId": "findPlansByOrganization",
        "tags": [
          "Plans",
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PlanList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/ports/{id}": {
      "get": {
        "summary": "Retrieve a port",
        "description": "Returns a port",
        "operationId": "findPortById",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/ports/{id}/assign": {
      "post": {
        "summary": "Assign a port to virtual network",
        "description": "Assign a port for a hardware to virtual network.",
        "operationId": "assignPort",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "body",
            "description": "Virtual Network ID",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortAssignInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/ports/{id}/unassign": {
      "post": {
        "summary": "Unassign a port",
        "description": "Unassign a port for a hardware.",
        "operationId": "unassignPort",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "body",
            "description": "Virtual Network ID",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PortAssignInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/ports/{id}/disbond": {
      "post": {
        "summary": "Disabling bonding",
        "description": "Disabling bonding for one or all ports",
        "operationId": "disbondPort",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bulk_disable",
            "in": "query",
            "description": "disable both ports",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/ports/{id}/bond": {
      "post": {
        "summary": "Enabling bonding",
        "description": "Enabling bonding for one or all ports",
        "operationId": "bondPort",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "bulk_enable",
            "in": "query",
            "description": "enable both ports",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/ports/{id}/convert/layer-2": {
      "post": {
        "summary": "Convert to Layer 2",
        "description": "Converts a bond port to Layer 2. IP assignments of the port will be removed.",
        "operationId": "convertLayer2",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "body",
            "description": "Virtual Network ID",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PortAssignInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/ports/{id}/convert/layer-3": {
      "post": {
        "summary": "Convert to Layer 3",
        "description": "Converts a bond port to Layer 3. VLANs must first be unassigned.",
        "operationId": "convertLayer3",
        "tags": [
          "Ports"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "request_ips",
            "in": "body",
            "description": "IPs to request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PortConvertLayer3Input"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/ports/{id}/native-vlan": {
      "post": {
        "summary": "Assign a native VLAN",
        "description": "Assigns a virtual network to this port as a \"native VLAN\"",
        "operationId": "assignNativeVlan",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "vnid",
            "in": "query",
            "description": "UUID or VNID of the virtual network to assign",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Remove native VLAN",
        "description": "Removes the native VLAN from this port",
        "operationId": "deleteNativeVlan",
        "tags": [
          "Ports",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Port UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Port"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/organizations/{id}/projects": {
      "get": {
        "summary": "Retrieve all projects of an organization",
        "description": "Returns a collection of projects that belong to the organization.",
        "operationId": "findOrganizationProjects",
        "tags": [
          "Organizations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/ProjectList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a project for the organization",
        "description": "Creates a new project for the organization",
        "operationId": "createOrganizationProject",
        "tags": [
          "Organizations",
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "project",
            "in": "body",
            "description": "Project to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "summary": "Retrieve all projects",
        "description": "Returns a collection of projects that the current user is a member of.",
        "operationId": "findProjects",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/ProjectList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a project",
        "description": "Creates a new project for the user default organization. If the user don't have an organization, a new one will be created.",
        "operationId": "createProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "body",
            "description": "Project to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateFromRootInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "summary": "Retrieve a project",
        "description": "Returns a single project if the user has access",
        "operationId": "findProjectById",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the project",
        "description": "Updates the project.",
        "operationId": "updateProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "project",
            "in": "body",
            "description": "Project to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the project",
        "description": "Deletes the project.",
        "operationId": "deleteProject",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/regions": {
      "get": {
        "summary": "Retrieve all regions",
        "description": "Returns all regions.",
        "operationId": "findRegions",
        "tags": [
          "Regions"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/RegionsList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/market/spot/prices": {
      "get": {
        "summary": "Get current spot market prices",
        "description": "Get Equinix Metal current spot market prices.",
        "operationId": "findSpotMarketPrices",
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "name": "facility",
            "in": "query",
            "description": "Facility to check spot market prices",
            "required": false,
            "type": "string"
          },
          {
            "name": "plan",
            "in": "query",
            "description": "Plan to check spot market prices",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotMarketPricesList"
            }
          }
        }
      }
    },
    "/market/spot/prices/history": {
      "get": {
        "summary": "Get spot market prices for a given period of time",
        "description": "Get spot market prices for a given plan and facility in a fixed period of time\n\n*Note: In the `200` response, the property `datapoints` contains arrays of `[float, integer]`.*",
        "operationId": "findSpotMarketPricesHistory",
        "tags": [
          "Market"
        ],
        "parameters": [
          {
            "name": "facility",
            "in": "query",
            "description": "Facility to check spot market prices",
            "required": true,
            "type": "string"
          },
          {
            "name": "plan",
            "in": "query",
            "description": "Plan to check spot market prices",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Timestamp from range",
            "required": true,
            "type": "string"
          },
          {
            "name": "until",
            "in": "query",
            "description": "Timestamp to range",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotPricesHistoryReport"
            }
          }
        }
      }
    },
    "/projects/{id}/spot-market-requests": {
      "post": {
        "summary": "Create a spot market request",
        "description": "Creates a new spot market request.\n\nType-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.\n\nThe features attribute allows you to optionally specify what features your server should have. For example, if you require a server with a TPM chip, you may specify `{ \"features\": { \"tpm\": \"required\" } }` (or `{ \"features\": [\"tpm\"] }` in shorthand).\n\nThe request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).\n\nThe request will not fail if we have no servers with that feature in our inventory.",
        "operationId": "createSpotMarketRequest",
        "tags": [
          "Projects",
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "spot_market_request",
            "in": "body",
            "description": "Spot Market Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpotMarketRequestCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SpotMarketRequest"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "get": {
        "summary": "List spot market requests",
        "description": "View all spot market requests for a given project.",
        "operationId": "listSpotMarketRequests",
        "tags": [
          "Projects",
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotMarketRequestList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/spot-market-requests/{id}": {
      "get": {
        "summary": "Retrieve a spot market request",
        "description": "Returns a single spot market request",
        "operationId": "findSpotMarketRequestById",
        "tags": [
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SpotMarketRequest UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SpotMarketRequest"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Delete the spot market request",
        "description": "Deletes the spot market request.",
        "operationId": "deleteSpotMarketRequest",
        "tags": [
          "SpotMarketRequest"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SpotMarketRequest UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "force_termination",
            "in": "query",
            "description": "Terminate associated spot instances",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/ssh-keys": {
      "get": {
        "summary": "Retrieve all ssh keys",
        "description": "Returns a collection of the user’s ssh keys.",
        "operationId": "findSSHKeys",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "Search string",
            "in": "query",
            "description": "Search by key, label, or fingerprint",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKeyList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a ssh key for the current user",
        "description": "Creates a ssh key.",
        "operationId": "createSSHKey",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "ssh key",
            "in": "body",
            "description": "ssh key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHKeyInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/projects/{id}/ssh-keys": {
      "get": {
        "summary": "Retrieve a project's ssh keys",
        "description": "Returns a collection of the project's ssh keys.",
        "operationId": "findProjectSSHKeys",
        "tags": [
          "Projects",
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Search string",
            "in": "query",
            "description": "Search by key, label, or fingerprint",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKeyList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a ssh key for the given project",
        "description": "Creates a ssh key.",
        "operationId": "createProjectSSHKey",
        "tags": [
          "Projects",
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ssh key",
            "in": "body",
            "description": "ssh key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHKeyInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/devices/{id}/ssh-keys": {
      "get": {
        "summary": "Retrieve a device's ssh keys",
        "description": "Returns a collection of the device's ssh keys.",
        "operationId": "findDeviceSSHKeys",
        "tags": [
          "Projects",
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Search string",
            "in": "query",
            "description": "Search by key, label, or fingerprint",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKeyList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/ssh-keys/{id}": {
      "get": {
        "summary": "Retrieve a ssh key",
        "description": "Returns a single ssh key if the user has access",
        "operationId": "findSSHKeyById",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the ssh key",
        "description": "Updates the ssh key.",
        "operationId": "updateSSHKey",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "ssh key",
            "in": "body",
            "description": "ssh key to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SSHKeyInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SSHKey"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the ssh key",
        "description": "Deletes the ssh key.",
        "operationId": "deleteSSHKey",
        "tags": [
          "SSHKeys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ssh key UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/storage/{id}/attachments": {
      "get": {
        "summary": "Retrieve all volume attachment",
        "description": "Returns a list of the current volume’s attachments.",
        "operationId": "findVolumeAttachments",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeAttachmentList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Attach your volume",
        "description": "Attach your volume to a device.",
        "operationId": "createVolumeAttachment",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachment",
            "in": "body",
            "description": "Device to attach",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeAttachmentInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/VolumeAttachment"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/storage/attachments/{id}": {
      "get": {
        "summary": "Retrieve an attachment",
        "description": "Returns a single attachment if the user has access",
        "operationId": "findVolumeAttachmentById",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Attachment UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeAttachment"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Detach volume",
        "description": "Detach volume.",
        "operationId": "deleteVolumeAttachment",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Attachment UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/storage/{id}/snapshots": {
      "get": {
        "summary": "Retrieve all volume snapshot",
        "description": "Returns a list of the current volume’s snapshots. To create Volume Snapshots, please check the Volume Snapshot Policies feature.",
        "operationId": "findVolumeSnapshots",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeSnapshotList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/storage/{volume_id}/snapshots/{id}": {
      "delete": {
        "summary": "Delete volume snapshot",
        "description": "Delete volume snapshot.",
        "operationId": "deleteVolumeSnapshot",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "volume_id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/storage/{id}/snapshot-policies": {
      "post": {
        "summary": "Create a volume snapshot policy",
        "description": "Creates a new snapshot policy of your volume.",
        "operationId": "createVolumeSnapshotPolicy",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "snapshot_count",
            "in": "query",
            "description": "Snapshot count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "snapshot_frequency",
            "in": "query",
            "description": "Snapshot frequency",
            "required": true,
            "type": "string",
            "enum": [
              "1min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/SnapshotPolicy"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/storage/snapshot-policies/{id}": {
      "put": {
        "summary": "Update the volume snapshot policy",
        "description": "Updates the volume snapshot policy.",
        "operationId": "updateVolumeSnapshotPolicy",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot Policy UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "snapshot_count",
            "in": "query",
            "description": "Snapshot count",
            "required": false,
            "type": "integer"
          },
          {
            "name": "snapshot_frequency",
            "in": "query",
            "description": "Snapshot frequency",
            "required": true,
            "type": "string",
            "enum": [
              "1min",
              "15min",
              "1hour",
              "1day",
              "1week",
              "1month",
              "1year"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/SnapshotPolicy"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the volume snapshot policy",
        "description": "Deletes the volume snapshot policy.",
        "operationId": "deleteVolumeSnapshotPolicy",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Snapshot Policy UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/storage": {
      "get": {
        "summary": "Retrieve all volumes",
        "description": "Returns a list of the current projects’s volumes.",
        "operationId": "findVolumes",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VolumeList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "summary": "Create a volume",
        "description": "Creates a new volume in our datacenter. The valid attribute values for `plan` and `facility` are:\n\n         \"facility\": \"ams1\", \"ewr1\", \"nrt1\", \"sjc1\"\n         \"plan\": \"storage_1\" (Standard), \"storage_2\" (Performance)",
        "operationId": "createVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "volume",
            "in": "body",
            "description": "Volume to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeCreateInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/storage/{id}": {
      "get": {
        "summary": "Retrieve a volume",
        "description": "Returns a single volume if the user has access",
        "operationId": "findVolumeById",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the volume",
        "description": "Updates the volume.",
        "operationId": "updateVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "volume",
            "in": "body",
            "description": "Volume to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the volume",
        "description": "Deletes the volume.",
        "operationId": "deleteVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/storage/{id}/restore": {
      "post": {
        "summary": "Restore volume",
        "description": "Restore the volume to the given snapshot.",
        "operationId": "restoreVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "restore_point",
            "in": "query",
            "description": "restore point",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/storage/{id}/clone": {
      "post": {
        "summary": "Clone volume/snapshot",
        "description": "Clone your volume or snapshot into a new volume. To clone the volume, send an empty body. To promote a volume snapshot into a new volume, include the snapshot_timestamp attribute in the request body.",
        "operationId": "cloneVolume",
        "tags": [
          "Volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Volume UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "snapshot_timestamp",
            "in": "query",
            "description": "snapshot timestamp",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/user/otp/app": {
      "post": {
        "summary": "Enable two factor auth using app",
        "description": "Enables two factor authentication using authenticator app.",
        "operationId": "enableTfaApp",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Disable two factor authentication",
        "description": "Disables two factor authentication.",
        "operationId": "disableTfaApp",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/user/otp/sms": {
      "post": {
        "summary": "Enable two factor auth using sms",
        "description": "Enables two factor authentication with sms.",
        "operationId": "enableTfaSms",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Disable two factor authentication",
        "description": "Disables two factor authentication.",
        "operationId": "disableTfaSms",
        "tags": [
          "TwoFactorAuth"
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{id}/traffic": {
      "get": {
        "summary": "Retrieve device traffic",
        "description": "Returns traffic for a specific device.",
        "operationId": "findTraffic",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Traffic direction",
            "required": true,
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ]
          },
          {
            "name": "timeframe",
            "in": "body",
            "description": "Traffic timeframe",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Timeframe"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Traffic interval",
            "required": false,
            "type": "string",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "year",
              "hour_of_day",
              "day_of_week",
              "day_of_month",
              "month_of_year"
            ]
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "Traffic bucket",
            "required": false,
            "type": "string",
            "enum": [
              "internal",
              "external"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/organizations/{id}/transfers": {
      "get": {
        "summary": "Retrieve all project transfer requests from or to an organization",
        "description": "Provides a collection of project transfer requests from or to the organization.",
        "operationId": "findOrganizationTransfers",
        "tags": [
          "Organizations",
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/TransferRequestList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          }
        }
      }
    },
    "/projects/{id}/transfers": {
      "post": {
        "summary": "Create a transfer request",
        "description": "Organization owners can transfer their projects to other organizations.",
        "operationId": "createTransferRequest",
        "tags": [
          "Projects",
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID of the project to be transferred",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "transfer_request",
            "in": "body",
            "description": "Transfer Request to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequestInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/transfers/{id}": {
      "get": {
        "summary": "View a transfer request",
        "description": "Returns a single transfer request.",
        "operationId": "findTransferRequestById",
        "tags": [
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transfer request UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Accept a transfer request",
        "description": "Accept a transfer request.",
        "operationId": "acceptTransferRequest",
        "tags": [
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transfer request UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "delete": {
        "summary": "Decline a transfer request",
        "description": "Decline a transfer request.",
        "operationId": "declineTransferRequest",
        "tags": [
          "TransferRequests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transfer request UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/devices/{id}/usages": {
      "get": {
        "summary": "Retrieve all usages for device",
        "description": "Returns all usages for a device.",
        "operationId": "findDeviceUsages",
        "tags": [
          "Devices",
          "Usages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "created[after]",
            "in": "query",
            "description": "Filter usages created after this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          },
          {
            "name": "created[before]",
            "in": "query",
            "description": "Filter usages created before this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/DeviceUsageList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/projects/{id}/usages": {
      "get": {
        "summary": "Retrieve all usages for project",
        "description": "Returns all usages for a project.",
        "operationId": "findProjectUsage",
        "tags": [
          "Devices",
          "Usages"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "created[after]",
            "in": "query",
            "description": "Filter usages created after this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          },
          {
            "name": "created[before]",
            "in": "query",
            "description": "Filter usages created before this date",
            "required": false,
            "type": "string",
            "format": "datetime"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/ProjectUsageList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/userdata/validate": {
      "post": {
        "summary": "Validate user data",
        "description": "Validates user data (Userdata)",
        "operationId": "validateUserdata",
        "tags": [
          "Userdata"
        ],
        "parameters": [
          {
            "name": "userdata",
            "in": "query",
            "description": "Userdata to validate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Retrieve all users",
        "description": "Returns a list of users that the are accessible to the current user (all users in the current user’s projects, essentially).",
        "operationId": "findUsers",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to return",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "minimum": 1,
            "maximum": 100000,
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Items returned per page",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 1,
            "maximum": 1000,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a user",
        "description": "Returns a single user if the user has access",
        "operationId": "findUserById",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Retrieve the current user",
        "description": "Returns the user object for the currently logged-in user.",
        "operationId": "findCurrentUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "unauthorized"
          }
        }
      },
      "put": {
        "summary": "Update the current user",
        "description": "Updates the currently logged-in user.",
        "operationId": "updateCurrentUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/verify-email": {
      "post": {
        "summary": "Create an email verification request",
        "description": "Creates an email verification request",
        "operationId": "createValidationRequest",
        "tags": [
          "UserVerificationTokens"
        ],
        "parameters": [
          {
            "name": "login",
            "in": "query",
            "description": "Email for verification request",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "put": {
        "summary": "Verify a user using an email verification token",
        "description": "Consumes an email verification token and verifies the user associated with it.",
        "operationId": "consumeVerificationRequest",
        "tags": [
          "UserVerificationTokens"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "User verification token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/projects/{id}/virtual-networks": {
      "get": {
        "summary": "Retrieve all virtual networks",
        "description": "Provides a list of virtual networks for a single project.",
        "operationId": "findVirtualNetworks",
        "tags": [
          "Projects",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkList"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "post": {
        "tags": [
          "Projects",
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "virtual_network",
            "in": "body",
            "description": "Virtual Network to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkCreateInput"
            }
          }
        ],
        "summary": "Create an virtual network",
        "description": "Creates an virtual network.",
        "operationId": "createVirtualNetwork",
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/virtual-networks/{id}": {
      "get": {
        "summary": "Get a virtual network",
        "description": "Get a virtual network.",
        "operationId": "getVirtualNetwork",
        "tags": [
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Network UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete a virtual network",
        "description": "Deletes a virtual network.",
        "operationId": "deleteVirtualNetwork",
        "tags": [
          "VLANs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Virtual Network UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/user/vpn": {
      "get": {
        "summary": "Retrieve the client vpn config for current user",
        "description": "Returns the client vpn config for the currently logged-in user.",
        "operationId": "findCurrentUserVpnConfig",
        "tags": [
          "VPN"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Facility code",
            "required": true,
            "type": "string",
            "enum": [
              "ewr1",
              "scj1",
              "arm1",
              "nrt1"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/VPNConfig"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "post": {
        "summary": "Turn on vpn for the current user",
        "description": "Turns on vpn for the currently logged-in user.",
        "operationId": "turnOnCurrentUserVpn",
        "tags": [
          "VPN"
        ],
        "responses": {
          "201": {
            "description": "created"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Turn off vpn for the current user",
        "description": "Turns off vpn for the currently logged-in user.",
        "operationId": "turnOffCurrentUserVpn",
        "tags": [
          "VPN"
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/emails": {
      "post": {
        "summary": "Create an email",
        "description": "Add a new email address to the current user.",
        "operationId": "createEmail",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "Email to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEmailInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      }
    },
    "/emails/{id}": {
      "get": {
        "summary": "Retrieve an email",
        "description": "Provides one of the user’s emails.",
        "operationId": "findEmailById",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Email UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      },
      "put": {
        "summary": "Update the email",
        "description": "Updates the email.",
        "operationId": "updateEmail",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Email UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "email",
            "in": "body",
            "description": "email to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmailInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          },
          "422": {
            "description": "unprocessable entity"
          }
        }
      },
      "delete": {
        "summary": "Delete the email",
        "description": "Deletes the email.",
        "operationId": "deleteEmail",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Email UUID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "unauthorized"
          },
          "403": {
            "description": "forbidden"
          },
          "404": {
            "description": "not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "required": [
        "address",
        "zip_code",
        "country"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip_code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/Coordinates"
        }
      }
    },
    "Coordinates": {
      "properties": {
        "latitude": {
          "type": "string"
        },
        "longitude": {
          "type": "string"
        }
      }
    },
    "Batch": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "error_messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "project": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "BatchesList": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Batch"
          }
        }
      }
    },
    "InstancesBatchCreateInput": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string"
              },
              "hostname": {
                "type": "string"
              },
              "hostnames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "type": "string"
              },
              "billing_cycle": {
                "type": "string"
              },
              "operating_system": {
                "type": "string"
              },
              "always_pxe": {
                "type": "boolean"
              },
              "userdata": {
                "type": "string"
              },
              "locked": {
                "type": "boolean"
              },
              "termination_time": {
                "type": "string",
                "format": "date-time"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "project_ssh_keys": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "user_ssh_keys": {
                "type": "array",
                "description": "The UUIDs of users whose SSH keys should be included on the provisioned device.",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "features": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "customdata": {
                "type": "object"
              },
              "ip_addresses": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address_family": {
                      "type": "number",
                      "format": "integer",
                      "description": "Address Family for IP Address",
                      "enum": [
                        4,
                        6
                      ],
                      "example": 4
                    },
                    "public": {
                      "type": "boolean",
                      "description": "Address Type for IP Address",
                      "example": false,
                      "default": true
                    },
                    "cidr": {
                      "type": "number",
                      "format": "integer",
                      "description": "Cidr Size for the IP Block created. Valid values depends on the operating system been provisioned (28..32 for IPv4 addresses, 124..127 for IPv6 addresses).",
                      "example": 28
                    },
                    "ip_reservations": {
                      "type": "array",
                      "description": "UUIDs of any IP reservations to use when assigning IPs",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "EmailInput": {
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "Entitlement": {
      "required": [
        "id",
        "slug",
        "weight"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "weight": {
          "type": "integer"
        },
        "instance_quota": {
          "type": "object"
        },
        "project_quota": {
          "type": "integer",
          "default": 0
        },
        "volume_quota": {
          "type": "object"
        },
        "ip_quota": {
          "type": "object"
        },
        "feature_access": {
          "type": "object"
        },
        "href": {
          "type": "string"
        },
        "volume_limits": {
          "type": "object"
        }
      }
    },
    "EntitlementInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "weight": {
          "type": "integer"
        },
        "instance_quota": {
          "type": "object"
        },
        "project_quota": {
          "type": "integer",
          "default": 0
        },
        "volume_quota": {
          "type": "object"
        },
        "feature_access": {
          "type": "object"
        }
      }
    },
    "EntitlementList": {
      "properties": {
        "entitlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entitlement"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Event": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "interpolated": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "EventInput": {
      "properties": {
        "type": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "private": {
          "type": "boolean"
        }
      }
    },
    "EventList": {
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "EventTypeList": {
      "properties": {
        "event_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        }
      }
    },
    "EventType": {
      "properties": {
        "group": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Facility": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "address": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "FacilityList": {
      "properties": {
        "facilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Facility"
          }
        }
      }
    },
    "HardwareLocation": {
      "properties": {
        "cage": {
          "type": "string"
        },
        "facility": {
          "type": "string"
        },
        "rack": {
          "type": "string"
        },
        "row": {
          "type": "string"
        },
        "switch": {
          "type": "string"
        }
      }
    },
    "HardwareReservation": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "short_id": {
          "type": "string",
          "format": "string"
        },
        "facility": {
          "$ref": "#/definitions/Facility"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "href": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "device": {
          "$ref": "#/definitions/Device"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "remove_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "HardwareReservationList": {
      "properties": {
        "hardware_reservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HardwareReservation"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Device": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "short_id": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image_url": {
          "type": "string"
        },
        "billing_cycle": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "iqn": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "bonding_mode": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "spot_instance": {
          "type": "boolean"
        },
        "spot_price_max": {
          "type": "number",
          "format": "float"
        },
        "termination_time": {
          "type": "string",
          "format": "date-time"
        },
        "customdata": {
          "type": "object"
        },
        "provisioning_percentage": {
          "type": "number",
          "format": "float"
        },
        "operating_system": {
          "$ref": "#/definitions/OperatingSystem"
        },
        "always_pxe": {
          "type": "boolean"
        },
        "ipxe_script_url": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/HardwareLocation"
        },
        "facility": {
          "$ref": "#/definitions/Facility"
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "userdata": {
          "type": "string"
        },
        "root_password": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Href",
          "description": "Full version of project object when included"
        },
        "project_lite": {
          "$ref": "#/definitions/Href",
          "description": "Lite version of project object when included"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "hardware_reservation": {
          "$ref": "#/definitions/Href"
        },
        "ssh_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "ip_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAssignment"
          }
        },
        "provisioning_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      }
    },
    "DeviceCreateInput": {
      "required": [
        "facility",
        "plan",
        "operating_system"
      ],
      "properties": {
        "facility": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "billing_cycle": {
          "type": "string"
        },
        "operating_system": {
          "type": "string"
        },
        "always_pxe": {
          "type": "boolean"
        },
        "ipxe_script_url": {
          "type": "string"
        },
        "userdata": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        },
        "hardware_reservation_id": {
          "type": "string",
          "format": "uuid",
          "example": "uuid or 'next-available'"
        },
        "spot_instance": {
          "type": "boolean"
        },
        "spot_price_max": {
          "type": "number",
          "format": "float"
        },
        "termination_time": {
          "type": "string",
          "format": "date-time"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project_ssh_keys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "user_ssh_keys": {
          "type": "array",
          "description": "The UUIDs of users whose SSH keys should be included on the provisioned device.",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "public_ipv4_subnet_size": {
          "type": "number",
          "format": "integer",
          "description": "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.",
          "default": 31,
          "x-deprecated": true
        },
        "private_ipv4_subnet_size": {
          "type": "number",
          "format": "integer",
          "description": "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.",
          "default": 28,
          "x-deprecated": true
        },
        "ip_addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "address_family": {
                "type": "number",
                "format": "integer",
                "description": "Address Family for IP Address",
                "example": 4,
                "enum": [
                  4,
                  6
                ]
              },
              "public": {
                "type": "boolean",
                "description": "Address Type for IP Address",
                "example": false,
                "default": true
              },
              "cidr": {
                "type": "number",
                "format": "integer",
                "description": "Cidr Size for the IP Block created. Valid values depends on the operating system being provisioned. (28..32 for IPv4 addresses, 124..127 for IPv6 addresses)",
                "example": 28
              },
              "ip_reservations": {
                "type": "array",
                "description": "UUIDs of any IP reservations to use when assigning IPs",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "IpAddressInput": {
      "properties": {
        "address_family": {
          "type": "number",
          "format": "integer",
          "description": "Address Family for IP Address",
          "example": 4
        }
      }
    },
    "DeviceUpdateInput": {
      "properties": {
        "hostname": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "billing_cycle": {
          "type": "string"
        },
        "userdata": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "always_pxe": {
          "type": "boolean"
        },
        "ipxe_script_url": {
          "type": "string"
        },
        "spot_instance": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "DeviceList": {
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Device"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Interconnection": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "contact_email": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "redundancy": {
          "type": "string"
        },
        "speed": {
          "type": "integer",
          "description": "The connection's speed in bps."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterconnectionPort"
          }
        },
        "facility": {
          "$ref": "#/definitions/Href"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "InterconnectionList": {
      "properties": {
        "interconnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interconnection"
          }
        }
      }
    },
    "InterconnectionCreateInput": {
      "required": [
        "name",
        "facility",
        "type",
        "redundancy"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "facility": {
          "type": "string",
          "description": "A Facility ID or code."
        },
        "type": {
          "type": "string",
          "description": "Either 'shared' or 'dedicated'."
        },
        "redundancy": {
          "type": "string",
          "description": "Either 'primary' or 'redundant'."
        },
        "contact_email": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "speed": {
          "type": "string",
          "description": "A connection speed, in bps, mbps, or gbps. Ex: '100000000' or '100 mbps'."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InterconnectionUpdateInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "redundancy": {
          "type": "string",
          "description": "Updating from 'redundant' to 'primary' will remove a secondary port, while updating from 'primary' to 'redundant' will add one."
        },
        "description": {
          "type": "string"
        },
        "contact_email": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InterconnectionPort": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "role": {
          "type": "string",
          "description": "Either 'primary' or 'secondary'."
        },
        "status": {
          "type": "string"
        },
        "switch_id": {
          "type": "string",
          "description": "A switch 'short ID'"
        },
        "virtual_circuits": {
          "$ref": "#/definitions/VirtualCircuitList"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "InterconnectionPortList": {
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterconnectionPort"
          }
        }
      }
    },
    "VirtualCircuit": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "vnid": {
          "type": "integer"
        },
        "nni_vlan": {
          "type": "integer"
        },
        "speed": {
          "type": "integer",
          "description": "integer representing bps speed"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "virtual_network": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "VirtualCircuitList": {
      "properties": {
        "virtual_circuits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualCircuit"
          }
        }
      }
    },
    "VirtualCircuitCreateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speed": {
          "type": "integer",
          "description": "speed can be passed as integer number representing bps speed or string (e.g. '52m' or '100g' or '4 gbps')"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vnid": {
          "type": "string",
          "format": "uuid",
          "description": "A Virtual Network record UUID or the VNID of a Virtual Network in your project (sent as integer)."
        },
        "nni_vlan": {
          "type": "integer",
          "minimum": 2,
          "maximum": 4094
        },
        "project": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VirtualCircuitUpdateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speed": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "vnid": {
          "type": "string",
          "description": "A Virtual Network record UUID or the VNID of a Virtual Network in your project."
        }
      }
    },
    "Invitation": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invitee": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "invited_by": {
          "$ref": "#/definitions/Href"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        },
        "projects_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invitation": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "InvitationList": {
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Membership"
          }
        }
      }
    },
    "InvitationInput": {
      "required": [
        "invitee"
      ],
      "properties": {
        "invitee": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "projects_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "License": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "license_key": {
          "type": "string"
        },
        "licensee_product": {
          "$ref": "#/definitions/Href"
        },
        "size": {
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "LicenseCreateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "size": {
          "type": "number"
        },
        "licensee_product_id": {
          "type": "string"
        }
      }
    },
    "LicenseUpdateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "size": {
          "type": "number"
        }
      }
    },
    "LicenseList": {
      "properties": {
        "licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/License"
          }
        }
      }
    },
    "Membership": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "user": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "MembershipList": {
      "properties": {
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Membership"
          }
        }
      }
    },
    "MembershipInput": {
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BgpConfigRequestInput": {
      "required": [
        "deployment_type",
        "asn"
      ],
      "properties": {
        "deployment_type": {
          "type": "string"
        },
        "asn": {
          "type": "integer"
        },
        "md5": {
          "type": "string"
        },
        "use_case": {
          "type": "string"
        }
      }
    },
    "BgpConfig": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "type": "string",
          "description": "status requested is valid only for global deployment",
          "enum": [
            "requested",
            "enabled",
            "disabled"
          ]
        },
        "deployment_type": {
          "type": "string",
          "enum": [
            "global",
            "local"
          ],
          "description": "In a Local BGP deployment, a customer uses an internal ASN to control routes within a single Equinix Metal datacenter. This means that the routes are never advertised to the global Internet. Global BGP, on the other hand, requires a customer to have a registered ASN and IP space.\n"
        },
        "asn": {
          "type": "integer",
          "description": "Autonomous System Number"
        },
        "route_object": {
          "type": "string",
          "description": "Specifies AS-MACRO (aka AS-SET) to use when building client route filters"
        },
        "md5": {
          "type": "string",
          "description": "(Optional) Password for BGP session in plaintext (not a checksum)"
        },
        "max_prefix": {
          "type": "integer",
          "description": "The maximum number of route filters allowed per server"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "requested_at": {
          "type": "string",
          "format": "date-time"
        },
        "sessions": {
          "type": "array",
          "description": "The direct connections between neighboring routers that want to exchange routing information.",
          "items": {
            "$ref": "#/definitions/BgpSession"
          }
        },
        "ranges": {
          "type": "array",
          "description": "The IP block ranges associated to the ASN (Populated in Global BGP only)",
          "items": {
            "$ref": "#/definitions/GlobalBgpRange"
          }
        },
        "href": {
          "type": "string"
        }
      }
    },
    "BgpSessionNeighbors": {
      "properties": {
        "bgp_neighbors": {
          "type": "array",
          "description": "A list of BGP session neighbor data",
          "items": {
            "$ref": "#/definitions/BgpNeighborData"
          }
        }
      }
    },
    "BgpNeighborData": {
      "properties": {
        "address_family": {
          "type": "number",
          "format": "integer",
          "description": "Address Family for IP Address",
          "example": "4 or 6"
        },
        "customer_as": {
          "type": "number",
          "format": "integer",
          "description": "The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.",
          "example": "65000"
        },
        "customer_ip": {
          "type": "string",
          "description": "The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.",
          "example": "10.32.16.1 (IPv4) or 2604:1380:4111:2700::1 (IPv6)"
        },
        "md5_enabled": {
          "type": "boolean",
          "description": "True if an MD5 password is configured for the project."
        },
        "md5_password": {
          "type": "string",
          "description": "The MD5 password configured for the project, if set."
        },
        "multihop": {
          "type": "boolean",
          "description": "True when the BGP session should be configured as multihop."
        },
        "peer_as": {
          "type": "number",
          "format": "integer",
          "description": "The Peer ASN to use when configuring BGP on your device.",
          "example": "65530"
        },
        "peer_ips": {
          "type": "array",
          "description": "A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.",
          "example": "[\"10.32.16.0\"] or [\"169.254.255.1\", \"169.254.255.2\"]",
          "items": {
            "type": "string"
          }
        },
        "routes_in": {
          "type": "array",
          "description": "A list of project subnets",
          "items": {
            "properties": {
              "route": {
                "type": "string",
                "description": "A project network",
                "example": "10.32.16.0/31"
              },
              "exact": {
                "type": "boolean"
              }
            }
          }
        },
        "routes_out": {
          "type": "array",
          "description": "A list of outgoing routes. Only populated if the BGP session has default route enabled.",
          "items": {
            "properties": {
              "route": {
                "type": "string",
                "example": "0.0.0.0/0"
              },
              "exact": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "BgpSession": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "type": "string"
        },
        "learned_routes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "address_family": {
          "type": "string"
        },
        "device": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        },
        "default_route": {
          "type": "boolean"
        }
      }
    },
    "BGPSessionInput": {
      "properties": {
        "address_family": {
          "type": "string"
        },
        "default_route": {
          "type": "boolean"
        }
      }
    },
    "BgpSessionList": {
      "properties": {
        "bgp_sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BgpSession"
          }
        }
      }
    },
    "GlobalBgpRange": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address_family": {
          "type": "integer"
        },
        "range": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "GlobalBgpRangeList": {
      "properties": {
        "global_bgp_ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GlobalBgpRange"
          }
        }
      }
    },
    "InternetGateway": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "virtual_network": {
          "$ref": "#/definitions/Href"
        },
        "created_by": {
          "type": "string"
        },
        "ip_reservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "href": {
          "type": "string"
        }
      }
    },
    "IPAssignment": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address_family": {
          "type": "integer"
        },
        "netmask": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "cidr": {
          "type": "integer"
        },
        "management": {
          "type": "boolean"
        },
        "manageable": {
          "type": "boolean"
        },
        "assigned_to": {
          "$ref": "#/definitions/Href"
        },
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "gateway": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "parent_block": {
          "$ref": "#/definitions/ParentBlock"
        }
      }
    },
    "ParentBlock": {
      "properties": {
        "network": {
          "type": "string"
        },
        "netmask": {
          "type": "string"
        },
        "cidr": {
          "type": "integer"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "IPReservation": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address_family": {
          "type": "integer"
        },
        "netmask": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "cidr": {
          "type": "integer"
        },
        "management": {
          "type": "boolean"
        },
        "manageable": {
          "type": "boolean"
        },
        "addon": {
          "type": "boolean"
        },
        "bill": {
          "type": "boolean"
        },
        "assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAssignment"
          }
        },
        "network": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "facility": {
          "$ref": "#/definitions/Facility"
        },
        "href": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "IPAssignmentInput": {
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "manageable": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "IPAssignmentList": {
      "properties": {
        "ip_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAssignment"
          }
        }
      }
    },
    "IPReservationList": {
      "properties": {
        "ip_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPReservation"
          }
        }
      }
    },
    "IPAvailabilitiesList": {
      "properties": {
        "available": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "IPReservationRequestInput": {
      "required": [
        "type",
        "quantity"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "comments": {
          "type": "string"
        },
        "facility": {
          "type": "string"
        },
        "customdata": {
          "type": "object"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "type": "string"
        },
        "fail_on_approval_required": {
          "type": "boolean"
        }
      }
    },
    "VirtualNetwork": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string",
          "format": "uuid"
        },
        "vxlan": {
          "type": "integer"
        },
        "facility": {
          "$ref": "#/definitions/Href"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "assigned_to": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "VirtualNetworkCreateInput": {
      "properties": {
        "project_id": {
          "type": "string",
          "format": "uuid"
        },
        "description": {
          "type": "string"
        },
        "facility": {
          "type": "string"
        },
        "vxlan": {
          "type": "integer"
        },
        "vlan": {
          "type": "integer"
        }
      }
    },
    "VirtualNetworkList": {
      "properties": {
        "virtual_networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetwork"
          }
        }
      }
    },
    "OperatingSystem": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "distro": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "provisionable_on": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OperatingSystemList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OperatingSystem"
      }
    },
    "Organization": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "logo": {
          "type": "string",
          "format": "binary"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "billing_address": {
          "$ref": "#/definitions/Address"
        },
        "entitlement": {
          "$ref": "#/definitions/Entitlement"
        },
        "terms": {
          "type": "integer"
        },
        "credit_amount": {
          "type": "number",
          "format": "float"
        },
        "customdata": {
          "type": "object"
        },
        "enforce_2fa_at": {
          "type": "string",
          "format": "date-time",
          "description": "Force to all members to have enabled the two factor authentication after that date, unless the value is null"
        }
      }
    },
    "OrganizationInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "logo": {
          "type": "string",
          "format": "binary"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "billing_address": {
          "$ref": "#/definitions/Address"
        },
        "customdata": {
          "type": "object"
        },
        "enforce_2fa_at": {
          "type": "string",
          "format": "date-time",
          "description": "Force to all members to have enabled the two factor authentication after that date, unless the value is null"
        }
      }
    },
    "OrganizationList": {
      "properties": {
        "organizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "PaymentMethod": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "card_type": {
          "type": "string"
        },
        "expiration_month": {
          "type": "string"
        },
        "expiration_year": {
          "type": "string"
        },
        "cardholder_name": {
          "type": "string"
        },
        "billing_address": {
          "$ref": "#/definitions/PaymentMethodBillingAddress"
        },
        "email": {
          "type": "string"
        },
        "created_by_user": {
          "$ref": "#/definitions/Href"
        },
        "organization": {
          "$ref": "#/definitions/Href"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        }
      }
    },
    "PaymentMethodBillingAddress": {
      "properties": {
        "street_address": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country_code_alpha2": {
          "type": "string"
        }
      }
    },
    "PaymentMethodCreateInput": {
      "required": [
        "name",
        "nonce"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "PaymentMethodUpdateInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "cardholder_name": {
          "type": "string"
        },
        "expiration_month": {
          "type": "string"
        },
        "expiration_year": {
          "type": "integer"
        },
        "billing_address": {
          "type": "object"
        }
      }
    },
    "PaymentMethodList": {
      "properties": {
        "payment_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethod"
          }
        }
      }
    },
    "Plan": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "line": {
          "type": "string"
        },
        "specs": {
          "type": "object"
        },
        "pricing": {
          "type": "object"
        },
        "legacy": {
          "type": "boolean"
        },
        "class": {
          "type": "string"
        },
        "available_in": {
          "type": "array",
          "description": "Shows which facilities the plan is available in, and the facility-based price if it is different from the default price.",
          "items": {
            "$ref": "#/definitions/Href"
          }
        }
      }
    },
    "PlanList": {
      "properties": {
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Plan"
          }
        }
      }
    },
    "PlanVersion": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "specs": {
          "type": "object"
        },
        "line": {
          "type": "string"
        }
      }
    },
    "Port": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "data": {
          "type": "object"
        },
        "disbond_operation_supported": {
          "type": "boolean",
          "description": "Indicates whether or not the bond can be broken on the port (when applicable)."
        },
        "hardware": {
          "$ref": "#/definitions/Href"
        },
        "virtual_networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "connected_port": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "PortAssignInput": {
      "properties": {
        "vnid": {
          "type": "string"
        }
      }
    },
    "PortConvertLayer3Input": {
      "properties": {
        "request_ips": {
          "type": "array",
          "items": {
            "properties": {
              "address_family": {
                "type": "integer"
              },
              "public": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "PortList": {
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Port"
          }
        }
      }
    },
    "Project": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "max_devices": {
          "type": "object"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "memberships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "network_status": {
          "type": "object"
        },
        "invitations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "payment_method": {
          "$ref": "#/definitions/Href"
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "ssh_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "bgp_config": {
          "$ref": "#/definitions/Href"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectCreateInput": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "string",
          "format": "uuid"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectCreateFromRootInput": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "organization_id": {
          "type": "string",
          "format": "uuid"
        },
        "payment_method_id": {
          "type": "string",
          "format": "uuid"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectUpdateInput": {
      "properties": {
        "name": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "string",
          "format": "uuid"
        },
        "backend_transfer_enabled": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "ProjectList": {
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "Region": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "facility": {
          "$ref": "#/definitions/Facility"
        }
      }
    },
    "RegionsList": {
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Region"
          }
        }
      }
    },
    "SpotMarketRequest": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "devices_min": {
          "type": "integer"
        },
        "devices_max": {
          "type": "integer"
        },
        "max_bid_price": {
          "type": "number",
          "format": "float"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "end_at": {
          "type": "string",
          "format": "date-time"
        },
        "href": {
          "type": "string"
        },
        "facilities": {
          "$ref": "#/definitions/Href"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "instances": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "SpotMarketRequestList": {
      "properties": {
        "spot_market_requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpotMarketRequest"
          }
        }
      }
    },
    "SpotMarketRequestCreateInput": {
      "properties": {
        "instance_attributes": {
          "type": "object",
          "properties": {
            "plan": {
              "type": "string"
            },
            "hostname": {
              "type": "string"
            },
            "hostnames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string"
            },
            "billing_cycle": {
              "type": "string"
            },
            "operating_system": {
              "type": "string"
            },
            "always_pxe": {
              "type": "boolean"
            },
            "userdata": {
              "type": "string"
            },
            "locked": {
              "type": "boolean"
            },
            "termination_time": {
              "type": "string",
              "format": "date-time"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "project_ssh_keys": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "user_ssh_keys": {
              "type": "array",
              "description": "The UUIDs of users whose SSH keys should be included on the provisioned device.",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "customdata": {
              "type": "object"
            },
            "public_ipv4_subnet_size": {
              "type": "integer"
            },
            "private_ipv4_subnet_size": {
              "type": "integer"
            }
          }
        },
        "devices_min": {
          "type": "integer"
        },
        "devices_max": {
          "type": "integer"
        },
        "max_bid_price": {
          "type": "number",
          "format": "float"
        },
        "end_at": {
          "type": "string",
          "format": "date-time"
        },
        "facilities": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "SSHKey": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "label": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "fingerprint": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "entity": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "SSHKeyInput": {
      "properties": {
        "label": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "SSHKeyList": {
      "properties": {
        "ssh_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SSHKey"
          }
        }
      }
    },
    "VolumeAttachment": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "volume": {
          "$ref": "#/definitions/Href"
        },
        "device": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "VolumeAttachmentInput": {
      "required": [
        "device_id"
      ],
      "properties": {
        "device_id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VolumeAttachmentList": {
      "properties": {
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeAttachment"
          }
        }
      }
    },
    "VolumeSnapshot": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "volume": {
          "$ref": "#/definitions/Href"
        }
      }
    },
    "VolumeSnapshotInput": {
      "required": [
        "device_id"
      ],
      "properties": {
        "device_id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "VolumeSnapshotList": {
      "properties": {
        "snapshots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeSnapshot"
          }
        }
      }
    },
    "SnapshotPolicy": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "snapshot_count": {
          "type": "integer",
          "maximum": 256,
          "exclusiveMaximum": false
        },
        "snapshot_frequency": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "volume": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "SnapshotPolicyInput": {
      "properties": {
        "snapshot_count": {
          "type": "integer"
        },
        "snapshot_frequency": {
          "type": "string"
        }
      }
    },
    "Volume": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "billing_cycle": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "facility": {
          "$ref": "#/definitions/Href"
        },
        "snapshot_policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "plan": {
          "$ref": "#/definitions/Plan"
        },
        "href": {
          "type": "string"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "VolumeCreateInput": {
      "required": [
        "facility",
        "plan",
        "size"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "facility": {
          "type": "string",
          "description": "ams1, ewr1, nrt1, sjc1"
        },
        "plan": {
          "type": "string",
          "description": "storage_1, storage_2"
        },
        "size": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "billing_cycle": {
          "type": "string",
          "description": "hourly"
        },
        "snapshot_policies": {
          "$ref": "#/definitions/SnapshotPolicyInput"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "VolumeUpdateInput": {
      "properties": {
        "description": {
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "locked": {
          "type": "boolean"
        },
        "billing_cycle": {
          "type": "string",
          "description": "hourly"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "VolumeList": {
      "properties": {
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Volume"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "SubscribableEvent": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "event_type": {
          "type": "string"
        },
        "event_name": {
          "type": "string"
        },
        "event_slug": {
          "type": "string"
        }
      }
    },
    "SubscribableEventsList": {
      "properties": {
        "subscribable_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscribableEvent"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "SupportRequestInput": {
      "required": [
        "subject",
        "message"
      ],
      "properties": {
        "subject": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        }
      }
    },
    "Meta": {
      "properties": {
        "first": {
          "$ref": "#/definitions/Href"
        },
        "previous": {
          "$ref": "#/definitions/Href"
        },
        "self": {
          "$ref": "#/definitions/Href"
        },
        "next": {
          "$ref": "#/definitions/Href"
        },
        "last": {
          "$ref": "#/definitions/Href"
        },
        "total": {
          "type": "integer"
        }
      }
    },
    "Href": {
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "type": "string"
        }
      }
    },
    "Timeframe": {
      "required": [
        "started_at",
        "ended_at"
      ],
      "properties": {
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "ended_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CapacityList": {
      "properties": {
        "capacity": {
          "$ref": "#/definitions/CapacityReport"
        }
      }
    },
    "CapacityReport": {
      "properties": {
        "ams1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "atl1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "dfw1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "ewr1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "fra1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "iad1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "lax1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "nrt1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "ord1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "sea1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "sin1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "sjc1": {
          "$ref": "#/definitions/CapacityPerFacility"
        },
        "syd1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        },
        "yyz1": {
          "$ref": "#/definitions/CapacityPerNewFacility"
        }
      }
    },
    "CapacityPerFacility": {
      "properties": {
        "baremetal_2a": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_2a2": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_1": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_3": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "c2.medium.x86": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_2": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "m2.xlarge.x86": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_s": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        },
        "baremetal_0": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        }
      }
    },
    "CapacityPerNewFacility": {
      "properties": {
        "baremetal_1e": {
          "$ref": "#/definitions/CapacityLevelPerBaremetal"
        }
      }
    },
    "CapacityPerBaremetal": {
      "properties": {
        "level": {
          "type": "string"
        },
        "available_servers": {
          "type": "integer"
        },
        "total_servers": {
          "type": "integer"
        },
        "market_buffer_percentage": {
          "type": "integer"
        },
        "market_floor_price": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "CapacityLevelPerBaremetal": {
      "properties": {
        "level": {
          "type": "string"
        }
      }
    },
    "CapacityInput": {
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServerInfo"
          }
        }
      }
    },
    "ServerInfo": {
      "properties": {
        "facility": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        }
      }
    },
    "CapacityCheckPerFacilityList": {
      "properties": {
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityCheckPerFacilityInfo"
          }
        }
      }
    },
    "CapacityCheckPerFacilityInfo": {
      "properties": {
        "facility": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        }
      }
    },
    "SpotMarketPricesList": {
      "properties": {
        "spot_market_prices": {
          "$ref": "#/definitions/SpotPricesReport"
        }
      }
    },
    "SpotPricesReport": {
      "properties": {
        "ams1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "atl1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "dfw1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "ewr1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "fra1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "iad1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "lax1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "nrt1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "ord1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "sea1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "sin1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "sjc1": {
          "$ref": "#/definitions/SpotPricesPerFacility"
        },
        "syd1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        },
        "yyz1": {
          "$ref": "#/definitions/SpotPricesPerNewFacility"
        }
      }
    },
    "SpotPricesPerFacility": {
      "properties": {
        "baremetal_2a": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_2a2": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_1": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_3": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "c2.medium.x86": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_2": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "m2.xlarge.x86": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_s": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        },
        "baremetal_0": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        }
      }
    },
    "SpotPricesPerNewFacility": {
      "properties": {
        "baremetal_1e": {
          "$ref": "#/definitions/SpotPricesPerBaremetal"
        }
      }
    },
    "SpotPricesPerBaremetal": {
      "properties": {
        "price": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "SpotPricesHistoryReport": {
      "properties": {
        "prices_history": {
          "$ref": "#/definitions/SpotPricesDatapoints"
        }
      }
    },
    "SpotPricesDatapoints": {
      "properties": {
        "datapoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpotPricesDatapointsList"
          }
        }
      }
    },
    "SpotPricesDatapointsList": {
      "type": "array",
      "items": {
        "type": "number"
      }
    },
    "NewPassword": {
      "properties": {
        "new_password": {
          "type": "string"
        }
      }
    },
    "RecoveryCodeList": {
      "properties": {
        "recovery_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Userdata": {
      "properties": {
        "userdata": {
          "type": "string"
        }
      }
    },
    "VPNConfig": {
      "properties": {
        "config": {
          "type": "string"
        }
      }
    },
    "TransferRequest": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "target_organization": {
          "$ref": "#/definitions/Href"
        },
        "project": {
          "$ref": "#/definitions/Href"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "TransferRequestInput": {
      "properties": {
        "target_organization_id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TransferRequestList": {
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferRequest"
          }
        }
      }
    },
    "DeviceUsage": {
      "properties": {
        "quantity": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "ProjectUsage": {
      "properties": {
        "facility": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "plan": {
          "type": "string"
        },
        "plan_version": {
          "type": "string"
        },
        "quantity": {
          "type": "string"
        },
        "unit": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "DeviceUsageList": {
      "properties": {
        "usages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceUsage"
          }
        }
      }
    },
    "ProjectUsageList": {
      "properties": {
        "usages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectUsage"
          }
        }
      }
    },
    "User": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "short_id": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "avatar_url": {
          "type": "string"
        },
        "avatar_thumb_url": {
          "type": "string"
        },
        "two_factor_auth": {
          "type": "string"
        },
        "max_projects": {
          "type": "integer"
        },
        "max_organizations": {
          "type": "integer"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "timezone": {
          "type": "string"
        },
        "fraud_score": {
          "type": "string"
        },
        "last_login_at": {
          "type": "string",
          "format": "date-time"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Href"
          }
        },
        "href": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "UserUpdateInput": {
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "avatar": {
          "type": "string",
          "format": "binary"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "UserCreateInput": {
      "required": [
        "first_name",
        "last_name",
        "emails"
      ],
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "company_name": {
          "type": "string"
        },
        "company_url": {
          "type": "string"
        },
        "verified_at": {
          "type": "string",
          "format": "date-time"
        },
        "social_accounts": {
          "type": "object"
        },
        "two_factor_auth": {
          "type": "string"
        },
        "avatar": {
          "type": "string",
          "format": "binary"
        },
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailInput"
          }
        },
        "locked": {
          "type": "boolean"
        },
        "customdata": {
          "type": "object"
        }
      }
    },
    "UserList": {
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "CreateEmailInput": {
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "UpdateEmailInput": {
      "properties": {
        "default": {
          "type": "boolean"
        }
      }
    },
    "Email": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        },
        "verified": {
          "type": "boolean"
        },
        "href": {
          "type": "string"
        }
      }
    }
  }
}