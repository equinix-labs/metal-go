// Code generated by go-swagger; DO NOT EDIT.

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}

package {{ .Name }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"os"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/go-openapi/strfmt"
)

func Command(ctx context.Context, client ClientService) *cobra.Command {
	command := cobra.Command{
		Use:   "{{ .Name }}",
		Short: "Client for {{ .Name }}",
	}

  {{ range .Operations }}
  command.AddCommand({{ camelize .Name}}(ctx, client)){{ end }}

	return &command
}

{{ range .Operations }}
func {{ camelize .Name }}(ctx context.Context, client ClientService) *cobra.Command {
  parameters := &{{ pascalize .Name }}Params{}

	command := &cobra.Command{
		Use: "{{ pascalize .Name }}",
		RunE: func(cmd *cobra.Command, args []string) error {
			{{ if .SuccessResponse }}
				{{ if .SuccessResponse.Schema }}
					result, err := client.{{ pascalize .Name }}(parameters, nil)
					if err != nil {
						return err
					}
					return printPayload(result.Payload)
				{{ else }}
					_, err := client.{{ pascalize .Name }}(parameters, nil)
					return err
				{{ end }}
			{{ end }}
		},
	}

	parameters.Context = ctx

  	{{ range .Params }}
	  	// {{ .GoType }}
		{{ if .IsNullable }}
			{{ if eq .GoType "int64" }}
				parameters.{{ .ID }} = command.PersistentFlags().Int64("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "string" }}
				parameters.{{ .ID }} = command.PersistentFlags().String("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}""{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "float32" }}
				parameters.{{ .ID }} = command.PersistentFlags().Float32("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "bool" }}
				parameters.{{ .ID }} = command.PersistentFlags().Bool("{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}false{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "strfmt.DateTime" }}
				command.Flags().Var(newDateTimeValue(&(parameters.{{ .ID }})), "{{ camelize .ID }}", "{{ .Description }}")
			{{ end }}
		{{ else }}
			{{ if eq .GoType "int64" }}
				command.PersistentFlags().Int64Var(&parameters.{{ .ID }}, "{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "string" }}
				command.PersistentFlags().StringVar(&parameters.{{ .ID }}, "{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}""{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "float32" }}
				command.PersistentFlags().Float32Var(&parameters.{{ .ID }}, "{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}0{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "bool" }}
				command.PersistentFlags().BoolVar(&parameters.{{ .ID }}, "{{ camelize .ID }}", {{ if .HasDefault }}{{ printf "%#v" .Default }}{{else}}false{{end}}, "{{ .Description }}")
			{{ end }}
			{{ if eq .GoType "strfmt.DateTime" }}
				parameters.{{ .ID }} = strfmt.DateTime(time.Now())
				command.Flags().Var(newDateTimeValue(&(parameters.{{ .ID }})), "{{ camelize .ID }}", "{{ .Description }}")
			{{ end }}
			{{ if not .HasDefault }}
				command.MarkPersistentFlagRequired("{{ camelize .ID }}")
			{{ end }}
		{{ end }}
  	{{ end }}

  	return command
}
{{ end }}

func printPayload(value interface{}) error {
	bytes, err := json.MarshalIndent(value, "", "  ")

	if err != nil {
		return err
	}

	_, err = os.Stdout.Write(bytes)
	return err
}

type dateTimeValue struct {
	v *strfmt.DateTime
}

func (dtv *dateTimeValue) String() string {
	return time.Time(*dtv.v).Format(strfmt.ISO8601LocalTime)
}

func (dtv *dateTimeValue) Set(flag string) error {
	return dtv.v.UnmarshalText([]byte(flag))
}

func (dtv *dateTimeValue) Type() string {
	return "dateTime"
}

func newDateTimeValue(v *strfmt.DateTime) pflag.Value {
	return &dateTimeValue{v}
}